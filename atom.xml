<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>海的那边</title>
  
  <subtitle>人无远虑，必有近忧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nhtzj.com/"/>
  <updated>2023-12-30T15:53:15.071Z</updated>
  <id>http://www.nhtzj.com/</id>
  
  <author>
    <name>Haitao Ni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>支付宝小程序之ctx绘制密码卡片并保存</title>
    <link href="http://www.nhtzj.com/3325869383/"/>
    <id>http://www.nhtzj.com/3325869383/</id>
    <published>2023-12-30T14:11:17.000Z</published>
    <updated>2023-12-30T15:53:15.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="# 前言"></a># 前言</h2><p>本篇记录一下之前在支付宝小程序上实现的6字明文密码生成图片后保存到图库功能。图库内保存的密码图片样式如下所示：</p><p><img src="/images/2022/01/password_card.PNG" width="400" height="400" title="点击查看，密码图片是带有圆角的哦！"></p><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><p>实现上图功能主要使用了：</p><ul><li><a href="https://opendocs.alipay.com/mini/api/ui-canvas" target="_blank" rel="noopener">my.createCanvasContext</a></li><li><a href="https://docs.alipay.com/mini/api/rod3ti" target="_blank" rel="noopener">CanvasContext.toTempFilePath</a></li><li><a href="https://opendocs.alipay.com/mini/api/media/image/my.saveimage" target="_blank" rel="noopener">my.saveImage</a></li></ul><p>其中和绘制相关的是<code>my.createCanvasContext</code>，该方法创建返回了<a href="https://opendocs.alipay.com/mini/api/canvascontext" target="_blank" rel="noopener">CanvasContext</a> 绘图上下文。CanvasContext如同Android中的Canvas画布，提供了一系列关于绘制的方法，比如：</p><ul><li>fillText：在画布上绘制被填充的文本</li><li>setFillStyle：设置 Canvas 填充色</li><li>setFontSize：设置 Canvas 字体大小</li><li>lineTo：使用直线连接子路径的终点到某个坐标的方法</li><li>arc：在 Canvas 上绘制圆弧路径</li><li>save：保存 canvas 全部状态的方法</li><li>restore：将 canvas 恢复到最近的保存状态的方法</li><li>beginPath：在 Canvas 上开始一个新路径</li><li>closePath：将笔点返回到当前子路径起始点的方法</li><li>fill：根据当前的填充样式填充当前或已存在的路径的方法</li><li>translate：对当前网格添加平移变换的方法</li><li>stroke：用于画出当前路径的边框</li><li>draw：提交 Canvas 绘制指令</li></ul><p>上述列出的<code>CanvasContext</code>的方法为本次绘制卡片效果所调用的绘制接口，CanvasContext提供的其余方法可至官方文档查看：<a href="https://opendocs.alipay.com/mini/api/canvascontext?pathHash=40a45253" target="_blank" rel="noopener">CanvasContext 概览</a></p><p>CanvasContext无法直接将绘制的内容保存到图库，但是官方文档「 <a href="https://opensupport.alipay.com/support/FAQ/348eb973-c90d-427d-94b6-fb655aa93817" target="_blank" rel="noopener">canvas组件如何实现生成图片保存</a> 」内提供了实现方式，即：使用<a href="https://docs.alipay.com/mini/api/rod3ti" target="_blank" rel="noopener">CanvasContext.toTempFilePath</a> 把当前画布的内容导出生成图片，获取图片路径（临时路径），再 通过 <a href="https://opendocs.alipay.com/mini/api/media/image/my.saveimage" target="_blank" rel="noopener">my.saveImage</a> 保存图片到相册。</p><p>所以整个实现的伪代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.绘制画布内容  </span></span><br><span class="line">CanvasContext.drawCanvas()</span><br><span class="line"><span class="comment">//2.导出生成图片，获取图片路径（临时路径）</span></span><br><span class="line">CanvasContext.toTempFilePath(&#123;</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//3.保存图片到相册</span></span><br><span class="line">    my.saveImage(&#123;</span><br><span class="line">      url: res.apFilePath,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="save-key-card-js"><a href="#save-key-card-js" class="headerlink" title="save-key-card.js"></a>save-key-card.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; measureText &#125; <span class="keyword">from</span> <span class="string">"./utils"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyCrad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  _ctx</span><br><span class="line">  _type</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(canvasId, type) &#123;</span><br><span class="line">    <span class="keyword">this</span>._ctx = my.createCanvasContext(canvasId)</span><br><span class="line">    <span class="keyword">this</span>._type = type</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveToGalary(deviceName = <span class="string">'可视门锁'</span>, pwdDigitList, callback = &#123;</span><br><span class="line">    success: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.drawCanvas(deviceName, pwdDigitList)</span><br><span class="line">    <span class="keyword">this</span>._ctx.toTempFilePath(&#123;</span><br><span class="line">      success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        my.saveImage(&#123;</span><br><span class="line">          url: res.apFilePath,</span><br><span class="line">          showActionSheet: <span class="literal">false</span>,</span><br><span class="line">          success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            callback.success()</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            callback.fail()</span><br><span class="line">          &#125;,</span><br><span class="line">          complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'toTempFilePath,  fail '</span>, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* ----------------------------- 画布相关 START ----------------------------- */</span></span><br><span class="line"></span><br><span class="line">  drawCanvas(deviceName, pwdDigitList) &#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span>._ctx,</span><br><span class="line">      type = <span class="keyword">this</span>._type,</span><br><span class="line">      typeName = type === <span class="number">0</span> ? <span class="string">'随机'</span> : <span class="string">'一次性'</span>,</span><br><span class="line">      viewWidth = <span class="number">670</span>,</span><br><span class="line">      viewHeight = <span class="number">470</span></span><br><span class="line">    <span class="keyword">this</span>.roundRect(ctx, <span class="number">0</span>, <span class="number">0</span>, viewWidth, viewHeight, <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">this</span>.drawText(ctx, <span class="string">`<span class="subst">$&#123;deviceName&#125;</span><span class="subst">$&#123;typeName&#125;</span>密码`</span>, <span class="number">34</span>, <span class="string">'#333333'</span>, <span class="number">60</span>, viewWidth)</span><br><span class="line">    <span class="keyword">this</span>.drawDivider(ctx, viewWidth, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.drawPwdArea(pwdDigitList, ctx, viewWidth, <span class="number">180</span>, <span class="number">54</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.drawText(ctx, <span class="string">`<span class="subst">$&#123;typeName&#125;</span>密码只能使用一次，用完作废，`</span>, <span class="number">24</span>, <span class="string">'silver'</span>, viewHeight / <span class="number">5</span> * <span class="number">4</span>, viewWidth)</span><br><span class="line">    <span class="keyword">this</span>.drawText(ctx, <span class="string">'不要泄露给他人。'</span>, <span class="number">24</span>, <span class="string">'silver'</span>, viewHeight / <span class="number">5</span> * <span class="number">4</span> + <span class="number">40</span>, viewWidth)</span><br><span class="line">    ctx.draw()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`drawCanvas-finish`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawText(ctx, text, fontSize, fontColor, y, viewWidth) &#123;</span><br><span class="line">    ctx.save()</span><br><span class="line">    ctx.setFillStyle(fontColor)</span><br><span class="line">    ctx.setFontSize(fontSize)</span><br><span class="line">    <span class="keyword">let</span> &#123; width &#125; = ctx.measureText(text + <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">if</span> (width === <span class="literal">undefined</span>) [</span><br><span class="line">      width = measureText(text, fontSize, ctx)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">var</span> x = (viewWidth - width) / <span class="number">2</span></span><br><span class="line">    <span class="comment">// console.log(`drawCanvas-drawText:$&#123;text&#125;,has measureText:$&#123;ctx.measureText !== undefined&#125;, measureText:$&#123;width&#125;,x:$&#123;x&#125;`)</span></span><br><span class="line">    ctx.fillText(text, x, y)</span><br><span class="line">    ctx.restore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawDivider(ctx, x, y) &#123;</span><br><span class="line">    ctx.save()</span><br><span class="line">    ctx.beginPath()</span><br><span class="line">    ctx.setStrokeStyle(<span class="string">'#F5F5F5'</span>)</span><br><span class="line">    ctx.setLineWidth(<span class="number">2</span>)</span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, y)</span><br><span class="line">    ctx.lineTo(x, y)</span><br><span class="line">    ctx.stroke()</span><br><span class="line">    ctx.restore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawPwdArea(pwdDigitList, ctx, viewWidth, y, margin, itemMargin) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwdDigitList == <span class="literal">null</span> || pwdDigitList.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> itemCount = pwdDigitList.length,</span><br><span class="line">      itemWidth = (viewWidth - margin * <span class="number">2</span> - itemMargin * (itemCount - <span class="number">1</span>)) / itemCount,</span><br><span class="line">      itemHeight = <span class="number">112</span>,</span><br><span class="line">      translateX = margin,</span><br><span class="line">      digitPointY = y + itemHeight / <span class="number">2</span> + <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`drawPwdArea,itemCount:<span class="subst">$&#123;itemCount&#125;</span>,itemWidth:<span class="subst">$&#123;itemWidth&#125;</span>,translateX:<span class="subst">$&#123;translateX&#125;</span>,digitPointY:<span class="subst">$&#123;digitPointY&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    ctx.save()</span><br><span class="line">    ctx.translate(translateX, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> digit <span class="keyword">of</span> pwdDigitList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.roundRect(ctx, <span class="number">0</span>, y, itemWidth, itemHeight, <span class="number">16</span>, <span class="string">'#F0F2F7'</span>)</span><br><span class="line">      <span class="keyword">this</span>.drawText(ctx, digit, <span class="number">50</span>, <span class="string">' #2B3852'</span>, digitPointY, itemWidth)</span><br><span class="line">      translateX = itemWidth + itemMargin</span><br><span class="line">      ctx.translate(translateX, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.restore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 绘制圆角矩形</span></span><br><span class="line"><span class="comment">  * @param &#123;Object&#125; ctx - canvas组件的绘图上下文</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125; x - 矩形的x坐标</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125; y - 矩形的y坐标</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125; w - 矩形的宽度</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125; h - 矩形的高度</span></span><br><span class="line"><span class="comment">  * @param &#123;Number&#125; r - 矩形的圆角半径</span></span><br><span class="line"><span class="comment">  * @param &#123;String&#125; [c = 'transparent'] - 矩形的填充色</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  roundRect(ctx, x, y, w, h, r, c = <span class="string">'#fff'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (w &lt; <span class="number">2</span> * r) &#123; r = w / <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (h &lt; <span class="number">2</span> * r) &#123; r = h / <span class="number">2</span>; &#125;</span><br><span class="line">    ctx.save()</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.fillStyle = c;</span><br><span class="line"></span><br><span class="line">    ctx.arc(x + r, y + r, r, <span class="built_in">Math</span>.PI, <span class="built_in">Math</span>.PI * <span class="number">1.5</span>);</span><br><span class="line">    ctx.moveTo(x + r, y);</span><br><span class="line">    ctx.lineTo(x + w - r, y);</span><br><span class="line">    ctx.lineTo(x + w, y + r);</span><br><span class="line"></span><br><span class="line">    ctx.arc(x + w - r, y + r, r, <span class="built_in">Math</span>.PI * <span class="number">1.5</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.lineTo(x + w, y + h - r);</span><br><span class="line">    ctx.lineTo(x + w - r, y + h);</span><br><span class="line"></span><br><span class="line">    ctx.arc(x + w - r, y + h - r, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">0.5</span>);</span><br><span class="line">    ctx.lineTo(x + r, y + h);</span><br><span class="line">    ctx.lineTo(x, y + h - r);</span><br><span class="line"></span><br><span class="line">    ctx.arc(x + r, y + h - r, r, <span class="built_in">Math</span>.PI * <span class="number">0.5</span>, <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.lineTo(x, y + r);</span><br><span class="line">    ctx.lineTo(x + r, y);</span><br><span class="line"></span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> KeyCrad</span><br></pre></td></tr></table></figure><h3 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由于在iOS上CanvasContext.measureText返回API不存在，所以得自己计算文本text宽度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; text </span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; fontSize </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> measureText = <span class="function"><span class="keyword">function</span> (<span class="params">text, fontSize</span>) </span>&#123;</span><br><span class="line">  text = <span class="built_in">String</span>(text);</span><br><span class="line">  <span class="keyword">var</span> text = text.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> width = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = text[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[a-zA-Z]/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">5.5</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">2.7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/-/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">3.25</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[\u4e00-\u9fa5]/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\(|\)/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">3.73</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\s/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">2.5</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/%/</span>.test(item)) &#123;</span><br><span class="line">      width += <span class="number">8</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      width += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> width * fontSize / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;# 前言&quot;&gt;&lt;/a&gt;# 前言&lt;/h2&gt;&lt;p&gt;本篇记录一下之前在支付宝小程序上实现的6字明文密码生成图片后保存到图库功能。图库内保存的密码图片样式如下所示：&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="支付宝小程序" scheme="http://www.nhtzj.com/categories/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="支付宝小程序" scheme="http://www.nhtzj.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="CanvasContext" scheme="http://www.nhtzj.com/tags/CanvasContext/"/>
    
      <category term="保存" scheme="http://www.nhtzj.com/tags/%E4%BF%9D%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>从ViewRootImpl开始分析事件分发过程</title>
    <link href="http://www.nhtzj.com/4080158305/"/>
    <id>http://www.nhtzj.com/4080158305/</id>
    <published>2021-07-02T14:20:40.000Z</published>
    <updated>2021-07-07T13:06:13.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇“<a href="/2679806526/">Android事件分发机制源码解析</a>”分析了从Activity获取到触摸事件之后开始的分发流程，本篇就承接该篇介绍在触摸事件到达Activity之前的一些流程。</p><p>当点击屏幕产生一个触摸行为时，这个触摸行为则是通过<strong>底层硬件</strong>捕获传递到<code>ViewRootImpl</code>内的。由于底层相关的涉及到native相关的知识，这里就简单摘取传到Java层的主要部分，详细的过程感兴趣的同学可以查看这篇文章“<a href="http://gityuan.com/2016/12/31/input-ipc/" target="_blank" rel="noopener">Input系统—事件处理全过程</a>”，而本篇就直接从<code>ViewRootImpl</code>接受到事件处开始展开。</p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>分发流程的主题部分如下时序图所示：</p><p><img src="/images/2021/07/触摸事件分发到Activity时序图.jpg" alt="时序图-触摸事件分发到Activity"></p><p>下面将详细介绍其中的每个步骤。</p><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/jni/android_view_InputEventReceiver.cpp;l=223" target="_blank" rel="noopener">frameworks/base/core/jni/android_view_InputEventReceiver.cpp （点击查看完整源码）</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> NativeInputEventReceiver::consumeEvents(JNIEnv* env,</span><br><span class="line">        <span class="keyword">bool</span> consumeBatches, <span class="keyword">nsecs_t</span> frameTime, <span class="keyword">bool</span>* outConsumedBatch) &#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; receiverObj(env, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">bool</span> skipCallbacks = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> seq;</span><br><span class="line">        InputEvent* inputEvent;</span><br><span class="line">        <span class="comment">// 读取InputEvent</span></span><br><span class="line">        <span class="keyword">status_t</span> status = mInputConsumer.consume(&amp;mInputEventFactory,</span><br><span class="line">                consumeBatches, frameTime, &amp;seq, &amp;inputEvent);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (inputEvent-&gt;getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> AINPUT_EVENT_TYPE_KEY:</span><br><span class="line">                    <span class="comment">//由Native的inputEvent来生成Java层的事件</span></span><br><span class="line">                    inputEventObj = android_view_KeyEvent_fromNative(env,</span><br><span class="line">                            <span class="keyword">static_cast</span>&lt;KeyEvent*&gt;(inputEvent));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inputEventObj) &#123;</span><br><span class="line">                <span class="comment">//执行Java层的InputEventReceiver.dispachInputEvent</span></span><br><span class="line">                env-&gt;CallVoidMethod(receiverObj.get(),</span><br><span class="line">                        gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj);</span><br><span class="line">    ...</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到最后是调用到了Java层的InputEventReceiver.dispachInputEvent()方法</p><h3 id="InputEventReceiver"><a href="#InputEventReceiver" class="headerlink" title="InputEventReceiver"></a>InputEventReceiver</h3><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/InputEventReceiver.java?q=InputEventReceiver.java&amp;ss=android%2Fplatform%2Fsuperproject" target="_blank" rel="noopener">frameworks/base/core/java/android/view/InputEventReceiver.java（点击查看完整源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides a low-level mechanism for an application to receive input events.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputEventReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchInputEvent</span><span class="params">(<span class="keyword">int</span> seq, InputEvent event)</span> </span>&#123;</span><br><span class="line">        mSeqMap.put(event.getSequenceNumber(), seq);</span><br><span class="line">        onInputEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatchInputEvent()</code>方法内部主要是调用了<code>onInputEvent(event)</code>方法。</p><p>而这里<code>InputEventReceiver</code>的实现类就是<code>ViewRootImpl</code>的内部类<code>WindowInputEventReceiver</code>。</p><h2 id="ViewRootImpl"><a href="#ViewRootImpl" class="headerlink" title="ViewRootImpl"></a>ViewRootImpl</h2><p><strong>从这里开始开始的流程就都是在Java层了。</strong></p><h3 id="WindowInputEventReceiver"><a href="#WindowInputEventReceiver" class="headerlink" title="WindowInputEventReceiver"></a>WindowInputEventReceiver</h3><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=8183" target="_blank" rel="noopener">frameworks/base/core/java/android/view/ViewRootImpl.java （点击查看完整源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowInputEventReceiver</span> <span class="keyword">extends</span> <span class="title">InputEventReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInputEvent</span><span class="params">(InputEvent event)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        enqueueInputEvent(event, <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子类<code>WindowInputEventReceiver.onInputEvent()</code>方法内调用了<code>ViewRootImpl.enqueueInputEvent()</code><br><span id="enqueueInputEvent"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueInputEvent</span><span class="params">(InputEvent event,</span></span></span><br><span class="line"><span class="function"><span class="params">        InputEventReceiver receiver, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> processImmediately)</span> </span>&#123;</span><br><span class="line">    adjustInputEventForCompatibility(event);</span><br><span class="line">    <span class="comment">//构建一个QueuedInputEvent</span></span><br><span class="line">    QueuedInputEvent q = obtainQueuedInputEvent(event, receiver, flags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将构建的QueuedInputEvent添加到pending队列末尾</span></span><br><span class="line">    QueuedInputEvent last = mPendingInputEventTail;</span><br><span class="line">    <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mPendingInputEventHead = q;</span><br><span class="line">        mPendingInputEventTail = q;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        last.mNext = q;</span><br><span class="line">        mPendingInputEventTail = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//队列计数</span></span><br><span class="line">    mPendingInputEventCount += <span class="number">1</span>;</span><br><span class="line">    Trace.traceCounter(Trace.TRACE_TAG_INPUT, mPendingInputEventQueueLengthCounterName,</span><br><span class="line">            mPendingInputEventCount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理pending队列内的事件</span></span><br><span class="line">    <span class="keyword">if</span> (processImmediately) &#123;</span><br><span class="line">        doProcessInputEvents(); <span class="comment">// 立即同步执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        scheduleProcessInputEvents();<span class="comment">//通过handler分发执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enqueueInputEvent()方法内将输入事件封装成QueuedInputEvent后加入队列末尾，之后再进行事件处理。</p><h3 id="QueuedInputEvent回收池"><a href="#QueuedInputEvent回收池" class="headerlink" title="QueuedInputEvent回收池"></a>QueuedInputEvent回收池</h3><p>其中QueuedInputEvent也是ViewRootImpl的内部类，成员变量mNext是用来链接下一个成员，从而组成一个单向链表。</p><p>其中mFlag是一个int型的标志位，在下方InputStage分发逻辑中有重要作用。可以看到<code>WindowInputEventReceiver.onInputEvent()</code>方法内调用<code>enqueueInputEvent()</code>方法时传入的<strong>flags</strong>行参值为<strong>0</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">QueuedInputEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> QueuedInputEvent mNext;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> InputEvent mEvent;</span><br><span class="line">     <span class="keyword">public</span> InputEventReceiver mReceiver;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> mFlags;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>obtainQueuedInputEvent()</code>和<code>recycleQueuedInputEvent()</code>方法则是配合ViewRootImpl的成员变量<code>mQueuedInputEventPoolSize</code>、<code>mQueuedInputEventPool</code>设计成了一个输入事件包装类QueuedInputEvent的回收池，便于QueuedInputEvent的重复使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 判断mQueuedInputEventPool回收池内是否有缓存的对象，若有则取出一个</span></span><br><span class="line"><span class="comment"> * 2. 若第一步内没有取到，则直接新建一个QueuedInputEvent对象</span></span><br><span class="line"><span class="comment"> * 3. 将入参保存到QueuedInputEvent对象内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> QueuedInputEvent <span class="title">obtainQueuedInputEvent</span><span class="params">(InputEvent event,</span></span></span><br><span class="line"><span class="function"><span class="params">        InputEventReceiver receiver, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    QueuedInputEvent q = mQueuedInputEventPool;</span><br><span class="line">    <span class="keyword">if</span> (q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mQueuedInputEventPoolSize -= <span class="number">1</span>;<span class="comment">//QueuedInputEvent回收池由于取出一个后数量减1</span></span><br><span class="line">        mQueuedInputEventPool = q.mNext;</span><br><span class="line">        q.mNext = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q = <span class="keyword">new</span> QueuedInputEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q.mEvent = event;</span><br><span class="line">    q.mReceiver = receiver;</span><br><span class="line">    q.mFlags = flags;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若当前回收池内的数量没有超过MAX_QUEUED_INPUT_EVENT_POOL_SIZE = 10，则将其放入回收池内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recycleQueuedInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    q.mEvent = <span class="keyword">null</span>;</span><br><span class="line">    q.mReceiver = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mQueuedInputEventPoolSize &lt; MAX_QUEUED_INPUT_EVENT_POOL_SIZE) &#123;</span><br><span class="line">        mQueuedInputEventPoolSize += <span class="number">1</span>;<span class="comment">//QueuedInputEvent回收池由于放入一个后数量加1</span></span><br><span class="line">        q.mNext = mQueuedInputEventPool;</span><br><span class="line">        mQueuedInputEventPool = q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pool of queued input events.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_QUEUED_INPUT_EVENT_POOL_SIZE = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="doProcessInputEvents"><a href="#doProcessInputEvents" class="headerlink" title="doProcessInputEvents"></a>doProcessInputEvents</h3><p>再回到enqueueInputEvent()方法内，分析最后几行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理pending队列内的事件</span></span><br><span class="line"><span class="keyword">if</span> (processImmediately) &#123;</span><br><span class="line">    doProcessInputEvents(); <span class="comment">// 立即同步执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    scheduleProcessInputEvents();<span class="comment">//通过handler分发执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processImmediately表示是否立即同步执行，在WindowInputEventReceiver回调内传入的是<code>true</code>，执行doProcessInputEvents()。而当false异步时，则调用到scheduleProcessInputEvents()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleProcessInputEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mProcessInputEventsScheduled) &#123;</span><br><span class="line">        mProcessInputEventsScheduled = <span class="keyword">true</span>;</span><br><span class="line">        Message msg = mHandler.obtainMessage(MSG_PROCESS_INPUT_EVENTS);</span><br><span class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        mHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ViewRootHandler mHandler = <span class="keyword">new</span> ViewRootHandler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewRootHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">case</span> MSG_PROCESS_INPUT_EVENTS:</span><br><span class="line">                mProcessInputEventsScheduled = <span class="keyword">false</span>;</span><br><span class="line">                doProcessInputEvents();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到最后还是调用到了doProcessInputEvents()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doProcessInputEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Deliver all pending input events in the queue.</span></span><br><span class="line">    <span class="keyword">while</span> (mPendingInputEventHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        QueuedInputEvent q = mPendingInputEventHead;</span><br><span class="line">        mPendingInputEventHead = q.mNext;</span><br><span class="line">        <span class="keyword">if</span> (mPendingInputEventHead == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPendingInputEventTail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.mNext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        mPendingInputEventCount -= <span class="number">1</span>;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        deliverInputEvent(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完所有输入事件后，清除标志位</span></span><br><span class="line">    <span class="keyword">if</span> (mProcessInputEventsScheduled) &#123;</span><br><span class="line">        mProcessInputEventsScheduled = <span class="keyword">false</span>;</span><br><span class="line">        mHandler.removeMessages(MSG_PROCESS_INPUT_EVENTS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doProcessInputEvents()方法内就是通过一个while循环遍历链表中的输入事件，调用deliverInputEvent()进行事件分发处理。</p><p>这里的mPendingInputEventHead链表就是上面的<a href="#enqueueInputEvent">enqueueInputEvent()</a>方法将内输入事件包装类插入的链表。</p><p>最后处理完所有输入事件后，清除标志位。<br><span id="deliverInputEvent"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliverInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"deliverInputEvent"</span>,</span><br><span class="line">            q.mEvent.getSequenceNumber());</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    InputStage stage;</span><br><span class="line">    <span class="keyword">if</span> (q.shouldSendToSynthesizer()) &#123;</span><br><span class="line">        stage = mSyntheticInputStage;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stage = q.shouldSkipIme() ? mFirstPostImeInputStage : mFirstInputStage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleWindowFocusChanged();</span><br><span class="line">        stage.deliver(q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        finishInputEvent(q); <span class="comment">//结束事件分发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="deliverInputEvent"><a href="#deliverInputEvent" class="headerlink" title="deliverInputEvent"></a>deliverInputEvent</h3><p>deliverInputEvent()方法从方法名就可以知道它的作用是分发事件。</p><p>方法内最主要的就是InputStage，最终要么是调用了stage.deliver(q)，要么就是stage为空直接结束事件分发。</p><p>而stage赋值处的几个InputStage子类是在ViewRootImpl.setView()方法内实例化的，这个方法在窗口管理和view绘制方面起到非常重要的作用，这部分之后会抽空再单独详细讲解。所以在View绘制之后所触发的事件，这里的7个InputStage子类都是不为空的。</p><p>而从这7个InputStage子类的构造器来看，就是典型的责任链模式，即自己能处理就自己处理，若不能处理则交给下一个处理，从下面InputStage的源码也能证实责任链模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">            mSyntheticInputStage = <span class="keyword">new</span> SyntheticInputStage();</span><br><span class="line">            InputStage viewPostImeStage = <span class="keyword">new</span> ViewPostImeInputStage(mSyntheticInputStage);</span><br><span class="line">            InputStage nativePostImeStage = <span class="keyword">new</span> NativePostImeInputStage(viewPostImeStage,</span><br><span class="line">                    <span class="string">"aq:native-post-ime:"</span> + counterSuffix);</span><br><span class="line">            InputStage earlyPostImeStage = <span class="keyword">new</span> EarlyPostImeInputStage(nativePostImeStage);</span><br><span class="line">            InputStage imeStage = <span class="keyword">new</span> ImeInputStage(earlyPostImeStage,</span><br><span class="line">                    <span class="string">"aq:ime:"</span> + counterSuffix);</span><br><span class="line">            InputStage viewPreImeStage = <span class="keyword">new</span> ViewPreImeInputStage(imeStage);</span><br><span class="line">            InputStage nativePreImeStage = <span class="keyword">new</span> NativePreImeInputStage(viewPreImeStage,</span><br><span class="line">                    <span class="string">"aq:native-pre-ime:"</span> + counterSuffix);</span><br><span class="line"></span><br><span class="line">            mFirstInputStage = nativePreImeStage;</span><br><span class="line">            mFirstPostImeInputStage = earlyPostImeStage;</span><br><span class="line">        ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>NativePreImeInputStage: 主要是为了将消息放到NativeActivity中去处理, NativeActivity和普通Acitivty的功能区别不大,只是很多代码都在native层去实现,这样执行效率更高,并且NativeActivity在游戏开发中很实用。</li><li>ViewPreImeInputStage: 从名字中就可得知,最后会调用Acitivity的所有view的onkeyPreIme方法,这样就给View在输入法处理key事件之前先得到消息并处理的机会。</li><li>ImeInputStage: ImeInputStage的onProcess方法会调用InputMethodManager的dispatchInputEvent方法处理消息。</li><li>EarlyPostImeInputStage: 屏幕上有焦点的View会高亮显示,用来提示用户焦点所在。</li><li>NativePostImeInputStage: 为了让IME处理完消息后能先于普通的Activity处理消息。</li><li>ViewPostImeInputStage: Acitivity和view处理各种消息。</li><li>SyntheticInputStage: 流水线的最后一级,经过层层过滤之后,到达这里的消息已经不多了,例如手机上的虚拟按键消息。</li></ul><p>那么Activity和View的事件处理主要对应的InputStage是ViewPostImeInputStage。</p><p>类图:</p><p><img src="/images/2021/07/InputStage类图.jpg" alt="InputStage类图"></p><h3 id="InputStage详解"><a href="#InputStage详解" class="headerlink" title="InputStage详解"></a>InputStage详解</h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class for implementing a stage in the chain of responsibility</span></span><br><span class="line"><span class="comment"> * for processing input events.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Events are delivered to the stage by the &#123;<span class="doctag">@link</span> #deliver&#125; method.  The stage</span></span><br><span class="line"><span class="comment"> * then has the choice of finishing the event or forwarding it to the next stage.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStage mNext;<span class="comment">//持有的下一个stage对象</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//3种状态</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORWARD = <span class="number">0</span>;<span class="comment">//当前stage不处理，会将事件传递给下个stage处理</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISH_HANDLED = <span class="number">1</span>;<span class="comment">//当前stage已处理，会调用finish，stage链上剩余的都不会处理该事件</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISH_NOT_HANDLED = <span class="number">2</span>;<span class="comment">//当前stage未处理，会调用finish，stage链上剩余的都不会处理该事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mTracePrefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an input stage.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next The next stage to which events should be forwarded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputStage</span><span class="params">(InputStage next)</span> </span>&#123;</span><br><span class="line">        mNext = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delivers an event to be processed.</span></span><br><span class="line"><span class="comment">     * 分发事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">deliver</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((q.mFlags &amp; QueuedInputEvent.FLAG_FINISHED) != <span class="number">0</span>) &#123;</span><br><span class="line">            forward(q);<span class="comment">//当前stage不处理，直接传给下一个（即：mNext）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shouldDropInputEvent(q)) &#123;<span class="comment">//判断事件是否需要丢弃</span></span><br><span class="line">            finish(q, <span class="keyword">false</span>);<span class="comment">//结束调用，stage链上的各个stage都不会处理这个事件</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            traceEvent(q, Trace.TRACE_TAG_VIEW);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = onProcess(q);<span class="comment">//在onProcess()内处理具体的操作</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">            &#125;</span><br><span class="line">            apply(q, result);<span class="comment">//根据onProcess()返回的状态值result判断是传递给下个stage处理还是结束</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Marks the the input event as finished then forwards it to the next stage.</span></span><br><span class="line"><span class="comment">     * finish方法主要是给QueuedInputEvent的mFlags标志位设置FLAG_FINISHED状态，且当handled = true时，设 </span></span><br><span class="line"><span class="comment">     * 置FLAG_FINISHED_HANDLED标志，以表示事件已被处理。</span></span><br><span class="line"><span class="comment">     * 当事件在stage内传递完毕后会调用finishInputEvent()，该方法内就会取出FLAG_FINISHED_HANDLED标志状态回调给mReciver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(QueuedInputEvent q, <span class="keyword">boolean</span> handled)</span> </span>&#123;</span><br><span class="line">        q.mFlags |= QueuedInputEvent.FLAG_FINISHED;</span><br><span class="line">        <span class="keyword">if</span> (handled) &#123;</span><br><span class="line">            q.mFlags |= QueuedInputEvent.FLAG_FINISHED_HANDLED;</span><br><span class="line">        &#125;</span><br><span class="line">        forward(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Forwards the event to the next stage.</span></span><br><span class="line"><span class="comment">     * 将事件分发给下个stage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        onDeliverToNext(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies a result code from &#123;<span class="doctag">@link</span> #onProcess&#125; to the specified event.</span></span><br><span class="line"><span class="comment">     * 根据onProcess()返回的状态值result判断是传递给下个stage处理还是结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(QueuedInputEvent q, <span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result == FORWARD) &#123;</span><br><span class="line">            forward(q);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == FINISH_HANDLED) &#123;</span><br><span class="line">            finish(q, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == FINISH_NOT_HANDLED) &#123;</span><br><span class="line">            finish(q, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid result: "</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when an event is ready to be processed.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A result code indicating how the event was handled.</span></span><br><span class="line"><span class="comment">     * 具体处理逻辑处，默认是无实现，直接返回FORWARD值，交给下个stage处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">onProcess</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FORWARD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when an event is being delivered to the next stage.</span></span><br><span class="line"><span class="comment">     * 若stage未分发完毕，则继续分发处理；</span></span><br><span class="line"><span class="comment">     * 否则调用finishInputEvent方法结束stage的链式调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDeliverToNext</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INPUT_STAGES) &#123;</span><br><span class="line">            Log.v(mTag, <span class="string">"Done with "</span> + getClass().getSimpleName() + <span class="string">". "</span> + q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mNext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mNext.deliver(q);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            finishInputEvent(q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasWindowFocus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mNext.onWindowFocusChanged(hasWindowFocus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mNext.onDetachedFromWindow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldDropInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span> || !mAdded) &#123;</span><br><span class="line">            Slog.w(mTag, <span class="string">"Dropping event due to root view being removed: "</span> + q.mEvent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!mAttachInfo.mHasWindowFocus</span><br><span class="line">                &amp;&amp; !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_POINTER)</span><br><span class="line">                &amp;&amp; !isAutofillUiShowing()) || mStopped</span><br><span class="line">                || (mIsAmbientMode &amp;&amp; !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_BUTTON))</span><br><span class="line">                || (mPausedForTransition &amp;&amp; !isBack(q.mEvent))) &#123;</span><br><span class="line">            <span class="comment">// This is a focus event and the window doesn't currently have input focus or</span></span><br><span class="line">            <span class="comment">// has stopped. This could be an event that came back from the previous stage</span></span><br><span class="line">            <span class="comment">// but the window has lost focus or stopped in the meantime.</span></span><br><span class="line">            <span class="keyword">if</span> (isTerminalInputEvent(q.mEvent)) &#123;</span><br><span class="line">                <span class="comment">// Don't drop terminal input events, however mark them as canceled.</span></span><br><span class="line">                q.mEvent.cancel();</span><br><span class="line">                Slog.w(mTag, <span class="string">"Cancelling event due to no window focus: "</span> + q.mEvent);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Drop non-terminal input events.</span></span><br><span class="line">            Slog.w(mTag, <span class="string">"Dropping event due to no window focus: "</span> + q.mEvent);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dump</span><span class="params">(String prefix, PrintWriter writer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mNext.dump(prefix, writer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBack</span><span class="params">(InputEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> KeyEvent) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((KeyEvent) event).getKeyCode() == KeyEvent.KEYCODE_BACK;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traceEvent</span><span class="params">(QueuedInputEvent q, <span class="keyword">long</span> traceTag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mTracePrefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTracePrefix = getClass().getSimpleName();</span><br><span class="line">        &#125;</span><br><span class="line">        Trace.traceBegin(traceTag, mTracePrefix + <span class="string">" id=0x"</span></span><br><span class="line">                + Integer.toHexString(q.mEvent.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="/images/2021/07/InputStage流程图.jpg" alt="InputStage流程图"></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>InputStage主要方法有这几个：</p><ul><li><p><strong>void deliver(QueuedInputEvent q)</strong>：这是deliverInputEvent()方法内的satge直接调用的入口。</p></li><li><p><strong>void forward(QueuedInputEvent q)</strong>、<strong>onDeliverToNext(QueuedInputEvent q)</strong>：forword内直接调用了onDeliverToNext。后者方法内判断当前stage是否为stage链上的最后一项（即：mNext == null）。若是，则调用finishInputEvent(q)将处理结果返回给mReceiver，否则就继续传递给下一个stage判断处理（mNext.deliver(q)）</p></li><li><p><strong>boolean shouldDropInputEvent(QueuedInputEvent q)</strong>: 判断事件是否需要丢弃</p></li><li><p><strong>int onProcess(QueuedInputEvent q) </strong>：具体处理逻辑处，默认是无实现，直接返回FORWARD值，交给下个stage处理</p></li><li><p><strong>void apply(QueuedInputEvent q, int result) </strong>：根据onProcess()返回的状态值result判断是传递给下个stage处理还是<strong>结束</strong>，这里的结束并不是直接跳出stage链内的调用，而是在链内逐个stage遍历时每个stage都不处理，直到责任链尾时（mNext == null）调用finishInputEvent方法返回本次执行结果。</p></li><li><p><strong>void finish(QueuedInputEvent q, boolean handled) </strong>：给QueuedInputEvent的mFlags标志位设置FLAG_FINISHED状态，且当handled = true时，设置FLAG_FINISHED_HANDLED标志，以表示事件已被处理。当事件在stage内传递完毕后会调用finishInputEvent()，该方法内就会取出FLAG_FINISHED_HANDLED标志状态并回调给mReceiver</p></li></ul><p>onProcess()返回的三种类型：</p><ul><li>FORWARD = 0 ：当前stage不处理，会将事件传递给下个stage处理</li><li>FINISH_HANDLED = 1 ： 当前stage已处理，会调用finish，stage链上剩余的都不会处理该事件</li><li>FINISH_NOT_HANDLED = 2 ： 当前stage未处理，会调用finish，stage链上剩余的都不会处理该事件</li></ul><p>其中FINISH_HANDLED 和FINISH_NOT_HANDLED在stage责任链模式上传递时的表现行为是完全一致的，即之后的stage都不会处理。只是在finishInputEvent内会将该值取出（表示该事件是否已被消费）回调给mReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (q.mReceiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> handled = (q.mFlags &amp; QueuedInputEvent.FLAG_FINISHED_HANDLED) != <span class="number">0</span>;</span><br><span class="line">        ...</span><br><span class="line">        q.mReceiver.finishInputEvent(q.mEvent, handled);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q.mEvent.recycleIfNeededAfterDispatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recycleQueuedInputEvent(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finishInputEvent方法就是将执行结果handled返回给mReceiver，最后调用recycleQueuedInputEvent(q)将QueuedInputEvent对象回收。</p><h3 id="ViewPostImeInputStage-onProcess"><a href="#ViewPostImeInputStage-onProcess" class="headerlink" title="ViewPostImeInputStage#onProcess()"></a>ViewPostImeInputStage#onProcess()</h3><p>InputStage内的具体执行流程分析完了，接下来就可以去看看<strong>ViewPostImeInputStage.onProcess()</strong>具体执行了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPostImeInputStage</span> <span class="keyword">extends</span> <span class="title">InputStage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPostImeInputStage</span><span class="params">(InputStage next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">onProcess</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q.mEvent <span class="keyword">instanceof</span> KeyEvent) &#123;</span><br><span class="line">            <span class="keyword">return</span> processKeyEvent(q);<span class="comment">//处理键盘事件</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> source = q.mEvent.getSource();</span><br><span class="line">            <span class="keyword">if</span> ((source &amp; InputDevice.SOURCE_CLASS_POINTER) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> processPointerEvent(q);<span class="comment">//处理触摸事件</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((source &amp; InputDevice.SOURCE_CLASS_TRACKBALL) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> processTrackballEvent(q);<span class="comment">//处理轨迹球事件</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> processGenericMotionEvent(q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>ViewPostImeInputStage.onProcess()</strong>内有判断当前事件类型，我们这边分析触摸事件，所以直接看<code>processPointerEvent(q)</code>。对其他事件感兴趣的可以自行查看源码分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">processPointerEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MotionEvent event = (MotionEvent)q.mEvent;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> handled = mView.dispatchPointerEvent(event);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> handled ? FINISH_HANDLED : FORWARD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就可以看到<code>ViewPostImeInputStage.onProgress()</code>返回的具体值<strong>handled ? FINISH_HANDLED : FORWARD</strong>，</p><p>FINISH_HANDLED：当前触摸事件由ViewPostImeInputStage处理；FORWARD：ViewPostImeInputStage未处理，继续传给SyntheticInputStage处理。</p><p>当然，processPointerEvent内的主角是<strong>mView.dispatchPointerEvent(event)</strong>。mView是ViewRootImpl的成员变量，该变量是在ViewRootImpl.setView()内赋值的。ViewRootImpl.setView()方法在上面介绍<a href="#deliverInputEvent">deliverInputEvent()</a>方法内的InputStage初始化实例时就提到过。</p><h2 id="ViewRootImpl-setView行参view具体类型确定"><a href="#ViewRootImpl-setView行参view具体类型确定" class="headerlink" title="ViewRootImpl#setView行参view具体类型确定"></a>ViewRootImpl#setView行参view具体类型确定</h2><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=5287;drc=master" target="_blank" rel="noopener">frameworks/base/core/java/android/view/ViewRootImpl.java （点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mView = view;</span><br><span class="line">            ...</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里view的入参类型是View，所以还得看看ViewRootImpl.setView()方法具体是哪里调用的，且view的具体类型是什么。</p><p>这里就直接给出结论：DecorView</p><p>调用过程：<strong>ActivityThread.handleResumeActivity()  -&gt;  WindowManagerImpl.addView()  -&gt;  WindowManagerGlobal.addView()  -&gt; ViewRootImpl.setView()</strong></p><p>这里的涉及到的具体细节将在下篇介绍Window相关知识的时候再详细展开说明。</p><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/ActivityThread.java;l=4462" target="_blank" rel="noopener">frameworks/base/core/java/android/app/ActivityThread.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finalStateRequest, <span class="keyword">boolean</span> isForward,</span></span></span><br><span class="line"><span class="function"><span class="params">        String reason)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">final</span> Activity a = r.activity;</span><br><span class="line">    ...</span><br><span class="line">      </span><br><span class="line">        r.window = r.activity.getWindow();</span><br><span class="line">        View decor = r.window.getDecorView();</span><br><span class="line">        decor.setVisibility(View.INVISIBLE);</span><br><span class="line">        ViewManager wm = a.getWindowManager();</span><br><span class="line">        WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">        a.mDecor = decor;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                wm.addView(decor, l);<span class="comment">//这里的wm的具体实现类是WindowManagerImpl</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerImpl.java;l=107" target="_blank" rel="noopener">frameworks/base/core/java/android/view/WindowManagerImpl.java（点击查看源码）</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WindowManagerGlobal mGlobal = WindowManagerGlobal.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(@NonNull View view, @NonNull ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">    applyDefaultToken(params);</span><br><span class="line">    mGlobal.addView(view, params, mContext.getDisplayNoVerify(), mParentWindow,</span><br><span class="line">            mContext.getUserId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerGlobal.java;l=331" target="_blank" rel="noopener">frameworks/base/core/java/android/view/WindowManagerGlobal.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></span></span><br><span class="line"><span class="function"><span class="params">        Display display, Window parentWindow, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</span><br><span class="line"></span><br><span class="line">        view.setLayoutParams(wparams);</span><br><span class="line"></span><br><span class="line">        mViews.add(view);</span><br><span class="line">        mRoots.add(root);</span><br><span class="line">        mParams.add(wparams);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do this last because it fires off messages to start doing things</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            root.setView(view, wparams, panelParentView, userId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="comment">// BadTokenException or InvalidDisplayException, clean up.</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                removeViewLocked(index, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="View-dispatchPointerEvent、DecorView-dispatchTouchEvent"><a href="#View-dispatchPointerEvent、DecorView-dispatchTouchEvent" class="headerlink" title="View#dispatchPointerEvent、DecorView#dispatchTouchEvent()"></a>View#dispatchPointerEvent、DecorView#dispatchTouchEvent()</h2><p>在确认了view的类型是DecorView后，在DecorView源码内搜索时确没有找到dispatchPointerEvent方法，那就从父类中查找（DecorView -&gt; FrameLayout -&gt; ViewGroup -&gt; View），直到在View内才找到该方法。</p><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;drc=master;l=14565" target="_blank" rel="noopener">frameworks/base/core/java/android/view/View.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">dispatchPointerEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.isTouchEvent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchGenericMotionEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里会判断当前是否为触摸事件，如果是则调用<code>dispatchTouchEvent(event)</code>。</p><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/DecorView.java;l=443" target="_blank" rel="noopener">frameworks/base/core/java/com/android/internal/policy/DecorView.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Window.Callback cb = mWindow.getCallback();</span><br><span class="line">    <span class="keyword">return</span> cb != <span class="keyword">null</span> &amp;&amp; !mWindow.isDestroyed() &amp;&amp; mFeatureId &lt; <span class="number">0</span></span><br><span class="line">            ? cb.dispatchTouchEvent(ev) : <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到DecorView.dispatchTouchEvent()，这里会调用<code>cb.dispatchTouchEvent(ev)</code>，cb为<code>Window.Callback</code>类型。</p><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Window.java;drc=master;l=336" target="_blank" rel="noopener">frameworks/base/core/java/android/view/Window.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called to process key events.  At the very least your</span></span><br><span class="line"><span class="comment">     * implementation must call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window#superDispatchKeyEvent&#125; to do the</span></span><br><span class="line"><span class="comment">     * standard key processing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The key event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called to process touch screen events.  At the very least your</span></span><br><span class="line"><span class="comment">     * implementation must call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.view.Window#superDispatchTouchEvent&#125; to do the</span></span><br><span class="line"><span class="comment">     * standard touch screen processing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event The touch screen event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Activity类实现了这个回调，并且在Activity.attach()方法内给PhoneWindow设置CallBack回调。</p><blockquote><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/Activity.java;l=730" target="_blank" rel="noopener">frameworks/base/core/java/android/app/Activity.java（点击查看源码）</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ContextThemeWrapper</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">LayoutInflater</span>.<span class="title">Factory2</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Window</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>,</span></span><br><span class="line"><span class="class">        <span class="title">OnCreateContextMenuListener</span>, <span class="title">ComponentCallbacks2</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Window</span>.<span class="title">OnWindowDismissedCallback</span>,</span></span><br><span class="line"><span class="class">        <span class="title">AutofillManager</span>.<span class="title">AutofillClient</span>, <span class="title">ContentCaptureManager</span>.<span class="title">ContentCaptureClient</span> </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></span><br><span class="line"><span class="function"><span class="params">        Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">        Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        CharSequence title, Activity parent, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">        NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class="line"><span class="function"><span class="params">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">        Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken)</span> </span>&#123;</span><br><span class="line">    attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">    mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line"></span><br><span class="line">    mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">    mWindow.setWindowControllerCallback(mWindowControllerCallback);</span><br><span class="line">    mWindow.setCallback(<span class="keyword">this</span>);<span class="comment">//设置回调</span></span><br><span class="line">    mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析到这里就回到平时从Activity开始分析的事件分发流程的起点了。从Activity.dispatchTouchEvent()开始分析事件分发的过程就可以看小编之前的文章“<a href="/2679806526/">Android事件分发机制源码解析</a>”了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/4b4ce5f30ab6" target="_blank" rel="noopener">Android Input（六）-ViewRootImpl接收事件</a></p><p><a href="http://gityuan.com/2016/12/31/input-ipc/" target="_blank" rel="noopener">Input系统—事件处理全过程</a></p><p><a href="https://cs.android.com/" target="_blank" rel="noopener">Android Code Search</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇“&lt;a href=&quot;/2679806526/&quot;&gt;Android事件分发机制源码解析&lt;/a&gt;”分析了从Activity获取到触摸事件之后开
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="事件分发" scheme="http://www.nhtzj.com/categories/android/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>从源码及字节码角度分析For-Each删除问题</title>
    <link href="http://www.nhtzj.com/2571175809/"/>
    <id>http://www.nhtzj.com/2571175809/</id>
    <published>2021-06-09T14:17:20.000Z</published>
    <updated>2021-06-16T15:32:13.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>印象中list在循环中删除成员时是会抛出异常的，结果最近无意中看到了关于该操作的相关文章，就将循环删除的几种方式均试了一下，实际结果却大相径庭。</p><p>今天就借此将结果和原因好好梳理分析一下。</p><p>这里重点介绍ArrayList这个类型的数据结构。</p><h2 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h2><p>本篇使用到的示例代码如下，使用 <code>ArrayList</code>，并放入“1”、“2”、“3”这三个字符串。</p><p>在注释处替换为下方各方式内的示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"1"</span>);</span><br><span class="line">        list.add(<span class="string">"2"</span>);</span><br><span class="line">        list.add(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处替换为下方各种方式内的遍历代码</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterable-forEach-Consumer-lt-super-E-gt-action"><a href="#Iterable-forEach-Consumer-lt-super-E-gt-action" class="headerlink" title="Iterable.forEach(Consumer&lt;? super E&gt; action)"></a>Iterable.forEach(Consumer&lt;? super E&gt; action)</h2><p>集合类均实现了 <code>Iterable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     SortedSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     SortedMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     HashSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     TreeSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     ArrayList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     LinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Collections</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     Arrays</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     AbstractCollection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementing this interface allows an object to be the target of</span></span><br><span class="line"><span class="comment"> * the "for-each loop" statement. See</span></span><br><span class="line"><span class="comment"> * &lt;strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/language/foreach.html"&gt;For-each Loop&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the type of elements returned by the iterator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jls</span> 14.14.2 The enhanced for statement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  ···</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each element of the &#123;<span class="doctag">@code</span> Iterable&#125;</span></span><br><span class="line"><span class="comment">     * until all elements have been processed or the action throws an</span></span><br><span class="line"><span class="comment">     * exception.  Unless otherwise specified by the implementing class,</span></span><br><span class="line"><span class="comment">     * actions are performed in the order of iteration (if an iteration order</span></span><br><span class="line"><span class="comment">     * is specified).  Exceptions thrown by the action are relayed to the</span></span><br><span class="line"><span class="comment">     * caller.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation behaves as if:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     *     for (T t : this)</span></span><br><span class="line"><span class="comment">     *         action.accept(t);</span></span><br><span class="line"><span class="comment">     * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action The action to be performed for each element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified action is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">···</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(number -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"2"</span>.equals(number)) &#123;</span><br><span class="line">        list.remove(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="for-result"></span></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread "main" java.util.ConcurrentModificationException</span><br><span class="line"><span class="built_in">at</span> java.util.ArrayList.forEach(ArrayList.java:<span class="number">1260</span>)</span><br><span class="line"><span class="built_in">at</span> TestForEach.main(TestForEach.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以看到，报了 <code>java.util.ConcurrentModificationException</code>错误，并提示了出错位置在 <code>java.util.ArrayList.forEach(ArrayList.java:1260)</code></p><p>这是因为ArrayList重写了forEach方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最主要的一个就是<strong>modCount</strong>，这个是<code>ArrayList</code>父类<code>AbstractList</code>的成员变量，默认值为<code>0</code>，表示list成员结构性修改的次数（add、remove、clear、sort等操作会使<strong>modCount</strong>值+1）。</p><p>而我们回调内调用remove()方法，该方法内部又调用了<code>fastRemove()</code>，从而使得modCount++，导致<strong>modCount != expectedModCount</strong>成立后抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the size of the</span></span><br><span class="line"><span class="comment">     * list, or otherwise perturb it in such a fashion that iterations in</span></span><br><span class="line"><span class="comment">     * progress may yield incorrect results.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">···</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><span id="ArrayList_remove"></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the first occurrence of the specified element from this list,</span></span><br><span class="line"><span class="comment"> * if it is present.  If the list does not contain the element, it is</span></span><br><span class="line"><span class="comment"> * unchanged.  More formally, removes the element with the lowest index</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;i&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span></span><br><span class="line"><span class="comment"> * contained the specified element (or equivalently, if this list</span></span><br><span class="line"><span class="comment"> * changed as a result of the call).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o element to be removed from this list, if present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment"> * return the value removed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以Arraylist在forEach回调内不能执行删除等会导致<strong>modCount</strong>值变化的操作。</p><p>而LinkedList等则没有重写forEach方法对<strong>modCount</strong>变量进行判断，所以这类在forEach回调内进行删除等操作是正常的。</p><h2 id="for-int-i-0-i-lt-list-size-i"><a href="#for-int-i-0-i-lt-list-size-i" class="headerlink" title="for(int i =0; i &lt; list.size(); i ++)"></a>for(int i =0; i &lt; list.size(); i ++)</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    String number = list.get(i);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">        list.remove(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3]</span><br></pre></td></tr></table></figure><p>能正常运行完毕，并输出当前list内的数据，可以看到字符串“1”已经被删除了。</p><h3 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h3><p>这里字节码相对比较简单，就直接带过，详细的字节码分析放在For-Each小节内。</p><p>这里字节码所表示的意思就是和Java源码所直接表示的意思一样，仅仅是循环执行for循环方法体内的代码逻辑，字符串常量“1”与列表内取出的元素做比较，一致则将其从列表中移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c TestForEach &gt; TestForEach.c</span><br></pre></td></tr></table></figure><p>得到文件：</p><blockquote><p>TestForEach.c</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"TestForEach.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForEach</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestForEach</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class java/util/ArrayList</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #3                  // Method java/util/ArrayList."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: aload_1</span><br><span class="line">       9: ldc           #4                  // String 1</span><br><span class="line">      11: invokevirtual #5                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">14</span>: pop</span><br><span class="line">      <span class="number">15</span>: aload_1</span><br><span class="line">      16: ldc           #6                  // String 2</span><br><span class="line">      18: invokevirtual #5                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">21</span>: pop</span><br><span class="line">      <span class="number">22</span>: aload_1</span><br><span class="line">      23: ldc           #7                  // String 3</span><br><span class="line">      25: invokevirtual #5                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">28</span>: pop</span><br><span class="line">      <span class="number">29</span>: iconst_0</span><br><span class="line">      <span class="number">30</span>: istore_2</span><br><span class="line">      <span class="number">31</span>: iload_2</span><br><span class="line">      <span class="number">32</span>: aload_1</span><br><span class="line">      33: invokevirtual #8                  // Method java/util/ArrayList.size:()I</span><br><span class="line">      <span class="number">36</span>: if_icmpge     <span class="number">69</span></span><br><span class="line">      <span class="number">39</span>: aload_1</span><br><span class="line">      <span class="number">40</span>: iload_2</span><br><span class="line">      41: invokevirtual #9                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;</span><br><span class="line">      44: checkcast     #10                 // class java/lang/String</span><br><span class="line">      <span class="number">47</span>: astore_3</span><br><span class="line">      48: ldc           #4                  // String 1</span><br><span class="line">      <span class="number">50</span>: aload_3</span><br><span class="line">      51: invokevirtual #11                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">54</span>: ifeq          <span class="number">63</span></span><br><span class="line">      <span class="number">57</span>: aload_1</span><br><span class="line">      <span class="number">58</span>: aload_3</span><br><span class="line">      59: invokevirtual #12                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z</span><br><span class="line">      <span class="number">62</span>: pop</span><br><span class="line">      <span class="number">63</span>: iinc          <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">66</span>: goto          <span class="number">31</span></span><br><span class="line">      69: getstatic     #13                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">72</span>: aload_1</span><br><span class="line">      73: invokevirtual #14                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      <span class="number">76</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-T-Iterable"><a href="#for-T-Iterable" class="headerlink" title="for( T : Iterable)"></a>for( T : Iterable<t>)</t></h2><p>这个就是增强for循环的写法，除了可以遍历数组，还可以用于遍历所有实现了Iterable<t> 接口的对象。</t></p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String number : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">        list.remove(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread "main" java.util.ConcurrentModificationException</span><br><span class="line"><span class="built_in">at</span> java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line"><span class="built_in">at</span> java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line"><span class="built_in">at</span> TestForEach.main(TestForEach.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><span id="for-each-analyse"></span></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>可以看到，程序又报了 <code>java.util.ConcurrentModificationException</code>错误。</p><p>但是这次提示的错误信息与 <a href="#for-result">Iterable.forEach(Consumer&lt;? super E&gt; action)</a>内的不一样。</p><p>从这错误信息来分析，出错的地方是在ArrayList的内部类Itr内的一个方法。但是明明写的代码里面没有用到这个类啊，而且remove()方法内也是没有调用该类，那推测是这增强for循环在遍历时调用的。等同于入下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();)&#123;</span><br><span class="line">        String number = iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">            list.remove(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过<code>iterator.hasNext()</code>判断是否还有下个元素，通过<code>iterator.next()</code>取出元素。</p><p>而<code>ArrayList#iterator()</code>返回的就是<code>Itr</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The returned iterator is &lt;a href="#fail-fast"&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an iterator over the elements in this list in proper sequence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="Itr"></span></p><blockquote><p>java.util.ArrayList.Itr</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">       <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">       <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">       Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> cursor != size; <span class="comment">// size是ArrayList的成员变量，用于记录当前列表内存放的元素数量</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           checkForComodification();</span><br><span class="line">           <span class="keyword">int</span> i = cursor;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">           Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           cursor = i + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">           checkForComodification();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">               cursor = lastRet;</span><br><span class="line">               lastRet = -<span class="number">1</span>;</span><br><span class="line">               expectedModCount = modCount;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">           Objects.requireNonNull(consumer);</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">           <span class="keyword">int</span> i = cursor;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">               consumer.accept((E) elementData[i++]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">           cursor = i;</span><br><span class="line">           lastRet = i - <span class="number">1</span>;</span><br><span class="line">           checkForComodification();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Itr类的逻辑比较简单，变量也有注释进行说明。</p><p>其中</p><ul><li><p>cursor：下个元素下标</p></li><li><p>lastRet：上个返回元素的下标，-1表示没有这个元素</p></li><li>expectedModCount：记录ArrayList内modCount值，用于<code>next()</code>、<code>remove()</code>、<code>forEachRemaining()</code>内做检验</li></ul><p>其中<code>next()</code>、<code>remove()</code>方法在执行时，会先调用<code>checkForComodification()</code>进行判断modCount在此遍历期间是否有过改动，改动过（及ArrayList数据源有过结构性改动，比如增加、删除、元素排序等）就会抛出<strong>ConcurrentModificationException</strong>异常。</p><p>因为在for循环体内调用了了<code>remove()</code>方法，所以在next() -&gt; checkForComodification()时会抛出<strong>ConcurrentModificationException</strong>异常。</p><h3 id="字节码分析-1"><a href="#字节码分析-1" class="headerlink" title="字节码分析"></a>字节码分析</h3><h4 id="反编译字节码文件"><a href="#反编译字节码文件" class="headerlink" title="反编译字节码文件"></a>反编译字节码文件</h4><p>Java内置了一个javap工具，通过该工具就能将 .class文件进行反汇编，得到具体的字节码指令。</p><p>通过<code>javap -help</code>就能看到<code>javap</code>工具的所有使用方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ～ javap -help</span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -help  --help  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><p>其中 `-v参数能导出了整个class文件的详情；</p><p> <code>-c</code>参数，得到代码相关的JVM指令操作码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v TestForEach &gt; TestForEach.v</span><br></pre></td></tr></table></figure><p>得到TestForEach.v文件，其中<strong>.v</strong>后缀是为了和<strong>-v</strong>参数对应，方便辨别。文件内保存的是文本内容，文件后缀可以随意取。</p><blockquote><p>TestForEach.v</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/nht/WorkSpace/java/bytecode/TestForEach.class</span><br><span class="line">  Last modified <span class="number">2021</span>-<span class="number">6</span>-<span class="number">10</span>; size <span class="number">1119</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">3</span>fb9f68c6d74f1a5bf9591aa607bf002</span><br><span class="line">  Compiled from "TestForEach.java"</span><br><span class="line">public class TestForEach</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line"><span class="function">  flags: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_SUPER</span></span></span><br><span class="line"><span class="function"><span class="title">Constant</span> <span class="title">pool</span>:</span></span><br><span class="line"><span class="function">   #1 = <span class="title">Methodref</span>          #17.#40        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span>."&lt;<span class="title">init</span>&gt;":()<span class="title">V</span></span></span><br><span class="line"><span class="function">   #2 = <span class="title">Class</span>              #41            // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span></span></span><br><span class="line"><span class="function">   #3 = <span class="title">Methodref</span>          #2.#40         // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span>."&lt;<span class="title">init</span>&gt;":()<span class="title">V</span></span></span><br><span class="line"><span class="function">   #4 = <span class="title">String</span>             #42            // 1</span></span><br><span class="line"><span class="function">   #5 = <span class="title">Methodref</span>          #2.#43         // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.add</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">   #6 = <span class="title">String</span>             #44            // 2</span></span><br><span class="line"><span class="function">   #7 = <span class="title">String</span>             #45            // 3</span></span><br><span class="line"><span class="function">   #8 = <span class="title">Methodref</span>          #2.#46         // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.iterator</span>:()<span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">Iterator</span>;</span></span><br><span class="line"><span class="function">   #9 = <span class="title">InterfaceMethodref</span> #47.#48        // <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator.hasNext</span>:()<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #10 = <span class="title">InterfaceMethodref</span> #47.#49        // <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator.next</span>:()<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;</span></span><br><span class="line"><span class="function">  #11 = <span class="title">Class</span>              #50            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">String</span></span></span><br><span class="line"><span class="function">  #12 = <span class="title">Methodref</span>          #11.#51        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">String.equals</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #13 = <span class="title">Methodref</span>          #2.#52         // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.remove</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #14 = <span class="title">Fieldref</span>           #53.#54        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System.out:Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="function">  #15 = <span class="title">Methodref</span>          #55.#56        // <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream.println</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">  #16 = <span class="title">Class</span>              #57            // <span class="title">TestForEach</span></span></span><br><span class="line"><span class="function">  #17 = <span class="title">Class</span>              #58            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="function">  #18 = <span class="title">Utf8</span>               &lt;<span class="title">init</span>&gt;</span></span><br><span class="line"><span class="function">  #19 = <span class="title">Utf8</span>               ()<span class="title">V</span></span></span><br><span class="line"><span class="function">  #20 = <span class="title">Utf8</span>               <span class="title">Code</span></span></span><br><span class="line"><span class="function">  #21 = <span class="title">Utf8</span>               <span class="title">LineNumberTable</span></span></span><br><span class="line"><span class="function">  #22 = <span class="title">Utf8</span>               <span class="title">LocalVariableTable</span></span></span><br><span class="line"><span class="function">  #23 = <span class="title">Utf8</span>               <span class="title">this</span></span></span><br><span class="line"><span class="function">  #24 = <span class="title">Utf8</span>               <span class="title">LTestForEach</span>;</span></span><br><span class="line"><span class="function">  #25 = <span class="title">Utf8</span>               <span class="title">main</span></span></span><br><span class="line"><span class="function">  #26 = <span class="title">Utf8</span>               ([<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">  #27 = <span class="title">Utf8</span>               <span class="title">number</span></span></span><br><span class="line"><span class="function">  #28 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="function">  #29 = <span class="title">Utf8</span>               <span class="title">args</span></span></span><br><span class="line"><span class="function">  #30 = <span class="title">Utf8</span>               [<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="function">  #31 = <span class="title">Utf8</span>               <span class="title">list</span></span></span><br><span class="line"><span class="function">  #32 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">ArrayList</span>;</span></span><br><span class="line"><span class="function">  #33 = <span class="title">Utf8</span>               <span class="title">LocalVariableTypeTable</span></span></span><br><span class="line"><span class="function">  #34 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">ArrayList</span>&lt;<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;&gt;;</span></span><br><span class="line"><span class="function">  #35 = <span class="title">Utf8</span>               <span class="title">StackMapTable</span></span></span><br><span class="line"><span class="function">  #36 = <span class="title">Class</span>              #41            // <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span></span></span><br><span class="line"><span class="function">  #37 = <span class="title">Class</span>              #59            // <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator</span></span></span><br><span class="line"><span class="function">  #38 = <span class="title">Utf8</span>               <span class="title">SourceFile</span></span></span><br><span class="line"><span class="function">  #39 = <span class="title">Utf8</span>               <span class="title">TestForEach.java</span></span></span><br><span class="line"><span class="function">  #40 = <span class="title">NameAndType</span>        #18:#19        // "&lt;<span class="title">init</span>&gt;":()<span class="title">V</span></span></span><br><span class="line"><span class="function">  #41 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span></span></span><br><span class="line"><span class="function">  #42 = <span class="title">Utf8</span>               1</span></span><br><span class="line"><span class="function">  #43 = <span class="title">NameAndType</span>        #60:#61        // <span class="title">add</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #44 = <span class="title">Utf8</span>               2</span></span><br><span class="line"><span class="function">  #45 = <span class="title">Utf8</span>               3</span></span><br><span class="line"><span class="function">  #46 = <span class="title">NameAndType</span>        #62:#63        // <span class="title">iterator</span>:()<span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">Iterator</span>;</span></span><br><span class="line"><span class="function">  #47 = <span class="title">Class</span>              #59            // <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator</span></span></span><br><span class="line"><span class="function">  #48 = <span class="title">NameAndType</span>        #64:#65        // <span class="title">hasNext</span>:()<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #49 = <span class="title">NameAndType</span>        #66:#67        // <span class="title">next</span>:()<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;</span></span><br><span class="line"><span class="function">  #50 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">String</span></span></span><br><span class="line"><span class="function">  #51 = <span class="title">NameAndType</span>        #68:#61        // <span class="title">equals</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #52 = <span class="title">NameAndType</span>        #69:#61        // <span class="title">remove</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #53 = <span class="title">Class</span>              #70            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System</span></span></span><br><span class="line"><span class="function">  #54 = <span class="title">NameAndType</span>        #71:#72        // <span class="title">out:Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="function">  #55 = <span class="title">Class</span>              #73            // <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span></span></span><br><span class="line"><span class="function">  #56 = <span class="title">NameAndType</span>        #74:#75        // <span class="title">println</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">  #57 = <span class="title">Utf8</span>               <span class="title">TestForEach</span></span></span><br><span class="line"><span class="function">  #58 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="function">  #59 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator</span></span></span><br><span class="line"><span class="function">  #60 = <span class="title">Utf8</span>               <span class="title">add</span></span></span><br><span class="line"><span class="function">  #61 = <span class="title">Utf8</span>               (<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #62 = <span class="title">Utf8</span>               <span class="title">iterator</span></span></span><br><span class="line"><span class="function">  #63 = <span class="title">Utf8</span>               ()<span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">Iterator</span>;</span></span><br><span class="line"><span class="function">  #64 = <span class="title">Utf8</span>               <span class="title">hasNext</span></span></span><br><span class="line"><span class="function">  #65 = <span class="title">Utf8</span>               ()<span class="title">Z</span></span></span><br><span class="line"><span class="function">  #66 = <span class="title">Utf8</span>               <span class="title">next</span></span></span><br><span class="line"><span class="function">  #67 = <span class="title">Utf8</span>               ()<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;</span></span><br><span class="line"><span class="function">  #68 = <span class="title">Utf8</span>               <span class="title">equals</span></span></span><br><span class="line"><span class="function">  #69 = <span class="title">Utf8</span>               <span class="title">remove</span></span></span><br><span class="line"><span class="function">  #70 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System</span></span></span><br><span class="line"><span class="function">  #71 = <span class="title">Utf8</span>               <span class="title">out</span></span></span><br><span class="line"><span class="function">  #72 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="function">  #73 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span></span></span><br><span class="line"><span class="function">  #74 = <span class="title">Utf8</span>               <span class="title">println</span></span></span><br><span class="line"><span class="function">  #75 = <span class="title">Utf8</span>               (<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function">  <span class="title">public</span> <span class="title">TestForEach</span>();</span></span><br><span class="line"><span class="function">    <span class="title">descriptor</span>: ()<span class="title">V</span></span></span><br><span class="line"><span class="function">    <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span></span></span><br><span class="line"><span class="function">    <span class="title">Code</span>:</span></span><br><span class="line"><span class="function">      <span class="title">stack</span>=1, <span class="title">locals</span>=1, <span class="title">args_size</span>=1</span></span><br><span class="line"><span class="function">         0: <span class="title">aload_0</span></span></span><br><span class="line"><span class="function">         1: <span class="title">invokespecial</span> #1                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span>."&lt;<span class="title">init</span>&gt;":()<span class="title">V</span></span></span><br><span class="line"><span class="function">         4: <span class="title">return</span></span></span><br><span class="line"><span class="function">      <span class="title">LineNumberTable</span>:</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 4: 0</span></span><br><span class="line"><span class="function">      <span class="title">LocalVariableTable</span>:</span></span><br><span class="line"><span class="function">        <span class="title">Start</span>  <span class="title">Length</span>  <span class="title">Slot</span>  <span class="title">Name</span>   <span class="title">Signature</span></span></span><br><span class="line"><span class="function">            0       5     0  <span class="title">this</span>   <span class="title">LTestForEach</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="title">java.lang.String</span>[]);</span></span><br><span class="line"><span class="function">    <span class="title">descriptor</span>: ([<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">    <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_STATIC</span></span></span><br><span class="line"><span class="function">    <span class="title">Code</span>:</span></span><br><span class="line"><span class="function">      <span class="title">stack</span>=2, <span class="title">locals</span>=4, <span class="title">args_size</span>=1</span></span><br><span class="line"><span class="function">         0: <span class="title">new</span>           #2                  // <span class="title">class</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span></span></span><br><span class="line"><span class="function">         3: <span class="title">dup</span></span></span><br><span class="line"><span class="function">         4: <span class="title">invokespecial</span> #3                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span>."&lt;<span class="title">init</span>&gt;":()<span class="title">V</span></span></span><br><span class="line"><span class="function">         7: <span class="title">astore_1</span></span></span><br><span class="line"><span class="function">         8: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">         9: <span class="title">ldc</span>           #4                  // <span class="title">String</span> 1</span></span><br><span class="line"><span class="function">        11: <span class="title">invokevirtual</span> #5                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.add</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">        14: <span class="title">pop</span></span></span><br><span class="line"><span class="function">        15: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">        16: <span class="title">ldc</span>           #6                  // <span class="title">String</span> 2</span></span><br><span class="line"><span class="function">        18: <span class="title">invokevirtual</span> #5                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.add</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">        21: <span class="title">pop</span></span></span><br><span class="line"><span class="function">        22: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">        23: <span class="title">ldc</span>           #7                  // <span class="title">String</span> 3</span></span><br><span class="line"><span class="function">        25: <span class="title">invokevirtual</span> #5                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.add</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">        28: <span class="title">pop</span></span></span><br><span class="line"><span class="function">        29: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">        30: <span class="title">invokevirtual</span> #8                  // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.iterator</span>:()<span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">Iterator</span>;</span></span><br><span class="line"><span class="function">        33: <span class="title">astore_2</span></span></span><br><span class="line"><span class="function">        34: <span class="title">aload_2</span></span></span><br><span class="line"><span class="function">        35: <span class="title">invokeinterface</span> #9,  1            // <span class="title">InterfaceMethod</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator.hasNext</span>:()<span class="title">Z</span></span></span><br><span class="line"><span class="function">        40: <span class="title">ifeq</span>          71</span></span><br><span class="line"><span class="function">        43: <span class="title">aload_2</span></span></span><br><span class="line"><span class="function">        44: <span class="title">invokeinterface</span> #10,  1           // <span class="title">InterfaceMethod</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator.next</span>:()<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;</span></span><br><span class="line"><span class="function">        49: <span class="title">checkcast</span>     #11                 // <span class="title">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">String</span></span></span><br><span class="line"><span class="function">        52: <span class="title">astore_3</span></span></span><br><span class="line"><span class="function">        53: <span class="title">ldc</span>           #4                  // <span class="title">String</span> 1</span></span><br><span class="line"><span class="function">        55: <span class="title">aload_3</span></span></span><br><span class="line"><span class="function">        56: <span class="title">invokevirtual</span> #12                 // <span class="title">Method</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">String.equals</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">        59: <span class="title">ifeq</span>          68</span></span><br><span class="line"><span class="function">        62: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">        63: <span class="title">aload_3</span></span></span><br><span class="line"><span class="function">        64: <span class="title">invokevirtual</span> #13                 // <span class="title">Method</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList.remove</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">Z</span></span></span><br><span class="line"><span class="function">        67: <span class="title">pop</span></span></span><br><span class="line"><span class="function">        68: <span class="title">goto</span>          34</span></span><br><span class="line"><span class="function">        71: <span class="title">getstatic</span>     #14                 // <span class="title">Field</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System.out:Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="function">        74: <span class="title">aload_1</span></span></span><br><span class="line"><span class="function">        75: <span class="title">invokevirtual</span> #15                 // <span class="title">Method</span> <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream.println</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Object</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="function">        78: <span class="title">return</span></span></span><br><span class="line"><span class="function">      <span class="title">LineNumberTable</span>:</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 6: 0</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 7: 8</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 8: 15</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 9: 22</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 18: 29</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 19: 53</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 20: 62</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 22: 68</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 56: 71</span></span><br><span class="line"><span class="function">        <span class="title">line</span> 58: 78</span></span><br><span class="line"><span class="function">      <span class="title">LocalVariableTable</span>:</span></span><br><span class="line"><span class="function">        <span class="title">Start</span>  <span class="title">Length</span>  <span class="title">Slot</span>  <span class="title">Name</span>   <span class="title">Signature</span></span></span><br><span class="line"><span class="function">           53      15     3 <span class="title">number</span>   <span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="function">            0      79     0  <span class="title">args</span>   [<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="function">            8      71     1  <span class="title">list</span>   <span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">ArrayList</span>;</span></span><br><span class="line"><span class="function">      <span class="title">LocalVariableTypeTable</span>:</span></span><br><span class="line"><span class="function">        <span class="title">Start</span>  <span class="title">Length</span>  <span class="title">Slot</span>  <span class="title">Name</span>   <span class="title">Signature</span></span></span><br><span class="line"><span class="function">            8      71     1  <span class="title">list</span>   <span class="title">Ljava</span>/<span class="title">util</span>/<span class="title">ArrayList</span>&lt;<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;&gt;;</span></span><br><span class="line"><span class="function">      <span class="title">StackMapTable</span>: <span class="title">number_of_entries</span> = 3</span></span><br><span class="line"><span class="function">        <span class="title">frame_type</span> = 253 /* <span class="title">append</span> */</span></span><br><span class="line"><span class="function">          <span class="title">offset_delta</span> = 34</span></span><br><span class="line"><span class="function">          <span class="title">locals</span> = [ <span class="title">class</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">ArrayList</span>, <span class="title">class</span> <span class="title">java</span>/<span class="title">util</span>/<span class="title">Iterator</span> ]</span></span><br><span class="line"><span class="function">        <span class="title">frame_type</span> = 33 /* <span class="title">same</span> */</span></span><br><span class="line"><span class="function">        <span class="title">frame_type</span> = 250 /* <span class="title">chop</span> */</span></span><br><span class="line"><span class="function">          <span class="title">offset_delta</span> = 2</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">SourceFile</span>: "<span class="title">TestForEach.java</span>"</span></span><br></pre></td></tr></table></figure><p>其中重点是Constant pool及其下方打括号{}内的方法表集合。</p><h4 id="Constant-pool"><a href="#Constant-pool" class="headerlink" title="Constant pool"></a>Constant pool</h4><p><code>Constant pool</code>意为常量池。主要存放的是两大类常量：字面量(Literal)和符号引用(Symbolic References)。字面量类似于java中的常量概念，如文本字符串，final常量等，而符号引用则属于编译原理方面的概念，包括以下三种:</p><ul><li>类和接口的全限定名(Fully Qualified Name)</li><li>字段的名称和描述符号(Descriptor)</li><li>方法的名称和描述符</li></ul><p>查看第一个常量池数据：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1</span> = Methodref          #<span class="number">17</span>.#<span class="number">40</span>        // </span><br><span class="line">#<span class="number">17</span> = Class              #<span class="number">58</span>            // java/lang/Object</span><br><span class="line">#<span class="number">18</span> = Utf8               &lt;init&gt;</span><br><span class="line">#<span class="number">19</span> = Utf8               ()V</span><br><span class="line">#<span class="number">40</span> = NameAndType        #<span class="number">18</span>:#<span class="number">19</span>        // "&lt;init&gt;":()V</span><br></pre></td></tr></table></figure><p>这是一个方法定义，指向了第17和第40个常量，以此类推，最终组成了右边注释的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br></pre></td></tr></table></figure><p>表示的是实例构造器。</p><p>()内部是入参，这里为空，表示没有入参。</p><p>V表示void，代表没有返回类型。</p><p>关于字节码的类型对应如下：</p><table><thead><tr><th style="text-align:center"><strong>标识字符</strong></th><th style="text-align:center"><strong>含义</strong></th></tr></thead><tbody><tr><td style="text-align:center">B</td><td style="text-align:center">基本类型byte</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">基本类型char</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">基本类型double</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">基本类型float</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">基本类型int</td></tr><tr><td style="text-align:center">J</td><td style="text-align:center">基本类型long</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">基本类型short</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:center">基本类型boolean</td></tr><tr><td style="text-align:center">V</td><td style="text-align:center">特殊类型void</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">对象类型，以分号结尾，如Ljava/lang/Object;</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">对于数组类型，每一位使用一个前置的”[“字符来描述，如定义一个java.lang.String[][]类型的维数组，将被记录为”[[Ljava/lang/String;”</td></tr></tbody></table><h4 id="方法表集合分析"><a href="#方法表集合分析" class="headerlink" title="方法表集合分析"></a>方法表集合分析</h4><p>在常量池之后打括号{}内的是对类内部的方法描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0: new           #2                  // class java/util/ArrayList</span><br><span class="line">3: dup</span><br><span class="line">4: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">7: astore_1</span><br></pre></td></tr></table></figure><p>其中0、3、4表示 new ArrayList();</p><p>new: 创建ArrayList对象，并将其引用引用值压入栈顶（栈内：ref）</p><p>dup：复制栈顶数值并将复制值压入栈顶（栈内：ref ref）</p><p>invokespecial：调用了构造方法初始化实例并使用了一个引用（栈内：ref）</p><p>astore_1：弹出栈顶数据，并保存到局部变量表1处。</p><p>7：存储到局部变量表1处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 8: aload_1</span><br><span class="line"> 9: ldc           #4                  // String 1</span><br><span class="line">11: invokevirtual #5                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z</span><br><span class="line">14: pop</span><br></pre></td></tr></table></figure><p>本组指令表示将字符串“1”添加到列表内。</p><p>8:将局部变量表1处的列表压入栈内</p><p>9:将字符串“1”压入栈内</p><p>11:调用add方法，此时会消耗掉栈内的两个值（将栈顶字符串通过add方法添加到列表内），并压入add方法的Boolean类型的返回结果</p><p>14:出栈，将栈顶由11操作压入的值出栈（丢弃）</p><p>15～28操作与此一致：</p><p>15～21：将字符串“2”加入列表内；</p><p>22～28：将字符串“3”加入列表内；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">29: aload_1</span><br><span class="line">30: invokevirtual #8                  // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;</span><br><span class="line">33: astore_2</span><br></pre></td></tr></table></figure><p>本组表示 Iterator<string> iterator = list.iterator();</string></p><p>aload_1：将局部变量表1处的列表压入栈内</p><p>invokevirtual：调用ArrayList.iterator方法获取Iterator对象并压入栈内（ArrayList内获取到的是Itr对象）</p><p>astore_2：将栈顶的Itr对象保存到局部变量表2处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">34: aload_2</span><br><span class="line">35: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z</span><br></pre></td></tr></table></figure><p>本组表示 ：iterator.hasNext()</p><p>aload_2:将局部变量表2处的Itr对象压入栈顶</p><p>invokeinterface：调用hasNext接口，并将boolean结果压入栈顶</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">40: ifeq          71</span><br><span class="line">43: aload_2</span><br><span class="line">44: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;</span><br><span class="line">49: checkcast     #11                 // class java/lang/String</span><br><span class="line">52: astore_3</span><br></pre></td></tr></table></figure><p>ifeq：if语句，栈顶内为true这执行下条指令（这里是43）；反之，执行71处指令</p><p>43～52:表示调用iterator.next()，并将取到的结果强转成String类型后保存到局部变量表3处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">53: ldc           #4                  // String 1</span><br><span class="line">55: aload_3</span><br><span class="line">56: invokevirtual #12                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z</span><br><span class="line">59: ifeq          68</span><br><span class="line">62: aload_1</span><br><span class="line">63: aload_3</span><br><span class="line">64: invokevirtual #13                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z</span><br><span class="line">67: pop</span><br><span class="line">68: goto          34</span><br></pre></td></tr></table></figure><p>字符串“1”和局部变量表3处的值入栈，调用equals方法后判断栈顶值，true则执行下条指令（这里是62）；反之，执行68处指令，goto 34，跳到34指令处执行，即再次开始判断hasNext。</p><p>62～67:将局部变量表3的值从列表内移除。</p><p>再执行68处goto指令。</p><p>而前面提到的71处指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">71: getstatic     #14                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">74: aload_1</span><br><span class="line">75: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">78: return</span><br></pre></td></tr></table></figure><p>表示调用System.out.println将列表数据打印。</p><p>return:结束程序。</p><p>综上分析，上面的<a href="#for-each-analyse">分析</a>过程是正确的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String number : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">        list.remove(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();)&#123;</span><br><span class="line">        String number = iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">            list.remove(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (String number : list) &#123;</span><br><span class="line">    if (&quot;2&quot;.equals(number)) &#123;</span><br><span class="line">        list.remove(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用<strong>for( T : Iterable)</strong>方式时，有一种特殊用例，会使得遍历时能正常删除，就是删除的是list倒数第二项时。</p><p>经过上面的分析，我们只需回看下<a href="#Itr">ArrayList.Itr</a>的其中两个成员方法：<code>ArrayList.Itr.hasNext()</code>和<code>ArrayList.Itr.remove()</code> 以及<a href="#ArrayList_remove"><code>ArrayList.remove()</code></a>就可以知道原因了。</p><blockquote><p>ArrayList.Itr</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size; <span class="comment">// size是ArrayList的成员变量，用于记录当前列表内存放的元素数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ArrayList</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">             <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 fastRemove(index);</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">             <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                 fastRemove(index);</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     modCount++;</span><br><span class="line">     <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">         System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                          numMoved);</span><br><span class="line">     elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当<code>Itr.next()</code>取出的是list最后第二项后，成员变量cursor+1后的值等于<code>size-1</code>。</p><p>而调用<strong>list.remove()</strong>（remove() -&gt; fastRemove()）方法后，可以看到<strong>–size</strong>。</p><p>所以此时<strong>Itr.cursor == size</strong>，<code>Itr.hasNext()</code>返回的是<code>false</code>，直接退出了循环，没有对list的最后一项进行判断。</p><p><strong>但是不推荐怎么使用。</strong></p><h2 id="其他正确的删除方式"><a href="#其他正确的删除方式" class="headerlink" title="其他正确的删除方式"></a>其他正确的删除方式</h2><p>除了上面删除几种方式外，还有如下几种<strong>正确</strong>的方式：</p><h3 id="显示使用迭代器"><a href="#显示使用迭代器" class="headerlink" title="显示使用迭代器"></a>显示使用迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String number;  </span><br><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();)&#123;</span><br><span class="line">      number = iterator.next();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">          iterator.remove();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">  number = iterator.next();</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"1"</span>.equals(number)) &#123;</span><br><span class="line">          iterator.remove();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collection-removeIf-Predicate-lt-super-E-gt-filter"><a href="#Collection-removeIf-Predicate-lt-super-E-gt-filter" class="headerlink" title="Collection.removeIf(Predicate&lt;? super E&gt; filter)"></a>Collection.removeIf(Predicate&lt;? super E&gt; filter)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.removeIf(number -&gt; number.equals(<span class="string">"1"</span>));</span><br></pre></td></tr></table></figure><p>Collection接口内给出了默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes all of the elements of this collection that satisfy the given</span></span><br><span class="line"><span class="comment"> * predicate.  Errors or runtime exceptions thrown during iteration or by</span></span><br><span class="line"><span class="comment"> * the predicate are relayed to the caller.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment"> * The default implementation traverses all elements of the collection using</span></span><br><span class="line"><span class="comment"> * its &#123;<span class="doctag">@link</span> #iterator&#125;.  Each matching element is removed using</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Iterator#remove()&#125;.  If the collection's iterator does not</span></span><br><span class="line"><span class="comment"> * support removal then an &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125; will be</span></span><br><span class="line"><span class="comment"> * thrown on the first matching element.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filter a predicate which returns &#123;<span class="doctag">@code</span> true&#125; for elements to be</span></span><br><span class="line"><span class="comment"> *        removed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if any elements were removed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the specified filter is null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException if elements cannot be removed</span></span><br><span class="line"><span class="comment"> *         from this collection.  Implementations may throw this exception if a</span></span><br><span class="line"><span class="comment"> *         matching element cannot be removed or if, in general, removal is not</span></span><br><span class="line"><span class="comment"> *         supported.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">    <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">            each.remove();</span><br><span class="line">            removed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是使用迭代器进行删除。</p><p>但是Arraylist类重写了该实现，提高了删除效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">    <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">    <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">    <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">        <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">            removeSet.set(i);</span><br><span class="line">            removeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">            i = removeSet.nextClearBit(i);</span><br><span class="line">            elementData[j] = elementData[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">            elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.size = newSize;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anyToRemove;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>for( T : Iterable) 完全等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;T&gt; iterator = list.iterator();iterator.hasNext();)&#123;</span><br><span class="line">        T number = iterator.next();</span><br><span class="line">       <span class="comment">//这里执行具体操作</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>能够正常遍历时删除的方式有</p><ul><li>for(int i =0; i &lt; list.size(); i ++)</li><li>迭代器方式</li><li>Collection.removeIf(Predicate&lt;? super E&gt; filter)</li></ul></li><li><p>for( T : Iterable) 或 迭代器内使用List.remove()时，若仅删除最后第二项时，不会抛出异常</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6844903588716609543" target="_blank" rel="noopener">轻松看懂Java字节码</a></p><p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener">字节码增强技术探索</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;印象中list在循环中删除成员时是会抛出异常的，结果最近无意中看到了关于该操作的相关文章，就将循环删除的几种方式均试了一下，实际结果却大相径
      
    
    </summary>
    
      <category term="Java" scheme="http://www.nhtzj.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nhtzj.com/tags/Java/"/>
    
      <category term="forEach" scheme="http://www.nhtzj.com/tags/forEach/"/>
    
      <category term="for" scheme="http://www.nhtzj.com/tags/for/"/>
    
  </entry>
  
  <entry>
    <title>黄山攻略</title>
    <link href="http://www.nhtzj.com/4187858666/"/>
    <id>http://www.nhtzj.com/4187858666/</id>
    <published>2021-05-03T13:53:27.000Z</published>
    <updated>2021-05-03T14:57:43.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="黄山风景区2020年最新手绘导游地图高清版"><a href="#黄山风景区2020年最新手绘导游地图高清版" class="headerlink" title="黄山风景区2020年最新手绘导游地图高清版"></a>黄山风景区2020年最新手绘导游地图高清版</h2><p><img src="http://file.nhtzj.com/blog/2021/05/2020%E6%9C%80%E6%96%B0%E9%BB%84%E5%B1%B1%E6%89%8B%E7%BB%98%E5%9B%BE.jpeg" alt="2020最新黄山手绘图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;黄山风景区2020年最新手绘导游地图高清版&quot;&gt;&lt;a href=&quot;#黄山风景区2020年最新手绘导游地图高清版&quot; class=&quot;headerlink&quot; title=&quot;黄山风景区2020年最新手绘导游地图高清版&quot;&gt;&lt;/a&gt;黄山风景区2020年最新手绘导游地图高清版&lt;/
      
    
    </summary>
    
      <category term="旅游" scheme="http://www.nhtzj.com/categories/%E6%97%85%E6%B8%B8/"/>
    
    
      <category term="旅游" scheme="http://www.nhtzj.com/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="安徽" scheme="http://www.nhtzj.com/tags/%E5%AE%89%E5%BE%BD/"/>
    
  </entry>
  
  <entry>
    <title>Unlock Music 付费音乐下载格式解锁</title>
    <link href="http://www.nhtzj.com/2292689392/"/>
    <id>http://www.nhtzj.com/2292689392/</id>
    <published>2021-01-24T05:03:22.000Z</published>
    <updated>2023-09-05T16:41:12.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><p>1月23日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例80例，其中境外输入病例15例（广东5例，上海3例，山西2例，天津1例，辽宁1例，江苏1例，陕西1例，甘肃1例），本土病例65例（黑龙江29例，河北19例，吉林12例，上海3例，北京2例）；无新增死亡病例；新增疑似病例1例，为境外输入病例（在上海）。</p><p>春节将至，疫情反复，大家注意日常防疫，减少不必要外出，外出佩戴口罩。预祝大家过个愉快的春节！</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如今因为音乐版权的问题，各大音乐播放平台之间竞争激烈，各家都推出了自己的音乐加密方式，导致付费音乐下载后不能用其他的音乐播放器播放，并且过了会员期后下载的文件在自家的播放器上也是不能播放的（需单曲购买后才支持解锁，支持其他播放器播放）。</p><p>车上U盘内的歌曲呢已经快1年没有更新了，趁着现在有QQ音乐会员打算更新一波曲目（感谢京东218会员赠送的1年QQ音乐绿钻豪华会员，鄙人裤腰带都快勒断了是不可能专门买的啦）。结果通过客户端下载下来的文件有部分是被加密过的，仅有少数歌曲是不加密的。这我明显是不能答应的啊。</p><p>经过不懈的努力后，终于找到一个开源的解码神奇啊。</p><blockquote><p><em>开源项目地址：</em><a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">https://github.com/ix64/unlock-music</a></p></blockquote><p>本篇主要讲述亮点：</p><ul><li>Unlock Music的使用</li><li>站点部署流程整理（太久没弄了，忘了，借这次机会操作一遍）</li></ul><p>部署后的地址：</p><blockquote><p>演示地址：<a href="https://unlock.nhtzj.com" target="_blank" rel="noopener">https://unlock.nhtzj.com</a></p></blockquote><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><ul><li>Mac pro</li><li>阿里云服务器(Centos7+Nginx)</li></ul><h3 id="Mac版QQ音乐下载路径"><a href="#Mac版QQ音乐下载路径" class="headerlink" title="Mac版QQ音乐下载路径"></a>Mac版QQ音乐下载路径</h3><ul><li>加密歌曲是放在：</li></ul><blockquote><p>/Users/当前登录用户名/Library/Containers/com.tencent.QQMusicMac/Data/Library/Application\ Support/QQMusicMac/iQmc/</p></blockquote><p>也可通过 <code>下载歌曲</code> -&gt; <code>已下载</code> -&gt; <code>在下载的歌曲上右键</code>-&gt; 点击 <code>查看本地文件</code> 直接跳转到该目录下。</p><ul><li>未加密文件是放在：</li></ul><blockquote><p>/Users/当前登录用户名/Music/QQ音乐</p></blockquote><p>也可通过定位到加密文件的方式直接打开这个目录。</p><h2 id="Unlock-Music-音乐解锁"><a href="#Unlock-Music-音乐解锁" class="headerlink" title="Unlock Music 音乐解锁"></a>Unlock Music 音乐解锁</h2><p>本小节直接从开源项目内的说明文档内抄录而来</p><p>若Github下载慢，可点击下方链接下载，从Github下载而来，未做修改。</p><p>版本：1.7.2</p><p><code>legacy版本</code>：</p><ul><li><a href="https://nht.oss-cn-shanghai.aliyuncs.com/blog/files/legacy-1.7.2.tar.gz" target="_blank" rel="noopener">legacy-1.7.2.tar.gz</a></li><li><a href="https://nht.oss-cn-shanghai.aliyuncs.com/blog/files/legacy-1.7.2.zip" target="_blank" rel="noopener">legacy-1.7.2.zip</a></li></ul><p><span id="modern_download"></span><br><code>modern版本</code>:</p><ul><li><a href="https://nht.oss-cn-shanghai.aliyuncs.com/blog/files/modern-1.7.2.tar.gz" target="_blank" rel="noopener">modern-1.7.2.tar.gz</a></li><li><a href="https://nht.oss-cn-shanghai.aliyuncs.com/blog/files/modern-1.7.2.zip" target="_blank" rel="noopener">modern-1.7.2.zip</a></li></ul><p><code>源码</code>：<a href="https://nht.oss-cn-shanghai.aliyuncs.com/blog/files/unlock-music-1.7.2.zip" target="_blank" rel="noopener">unlock-music-1.7.2.zip</a></p><p><code>legacy版本</code>和<code>modern版本</code>为已构建的版本，构建版本和源码的使用可以查看章节 <a href="#usage">使用方法</a></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li>在浏览器中解锁加密的音乐文件。 Unlock encrypted music file in the browser.</li><li>unlock-music项目是以学习和技术研究的初衷创建的，修改、再分发时请遵循<a href="https://github.com/ix64/unlock-music/blob/master/LICENSE" target="_blank" rel="noopener">License</a></li><li>Unlock Music的CLI版本正在开发中。</li><li>我们新建了Telegram群组，欢迎加入！<a href="https://t.me/unlock_music_chat" target="_blank" rel="noopener">https://t.me/unlock_music_chat</a></li><li><a href="https://github.com/unlock-music/cli" target="_blank" rel="noopener">CLI版本 Alpha</a> 大批量转换建议使用CLI版本</li><li><a href="https://github.com/ix64/unlock-music/wiki/和UnlockMusic相关的项目" target="_blank" rel="noopener">相关的其他项目</a></li><li><a href="https://github.com/ix64/unlock-music/workflows/Release and GitHub Pages/badge.svg" target="_blank" rel="noopener"><img src="https://github.com/ix64/unlock-music/workflows/Release%20and%20GitHub%20Pages/badge.svg" alt="Release and GitHub Pages"></a></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h4><ul><li><p>QQ音乐 (.qmc0/.qmc2/.qmc3/.qmcflac/.qmcogg/.tkm) 。<br>其中.qmc0：标准；.qmc3：HQ高品质；.qmcflac：SQ高品质</p><ul><li>写入封面图片</li></ul></li><li><p>Moo音乐格式 (<a href="https://github.com/ix64/unlock-music/issues/11" target="_blank" rel="noopener">.bkcmp3/.bkcflac</a>)</p></li><li><p>QQ音乐Tm格式 (.tm0/.tm2/.tm3/.tm6)</p></li><li><p>QQ音乐新格式 (实验性支持)</p><ul><li>.mflac</li></ul></li><li><p><a href="https://github.com/ix64/unlock-music/issues/3" target="_blank" rel="noopener">.mgg</a></p></li><li><p>网易云音乐格式 (.ncm)</p><ul><li>补全ncm的ID3/FlacMeta信息</li></ul></li><li><p>虾米音乐格式 (.xm) (测试阶段)</p></li><li><p>酷我音乐格式 (.kwm) (测试阶段)</p></li><li><p>酷狗音乐格式 (.kgm) (<a href="https://github.com/ix64/unlock-music/wiki/其他音乐格式工具#酷狗音乐-kgmvpr解锁工具" target="_blank" rel="noopener">CLI版本</a>)</p></li></ul><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><ul><li>在浏览器中解锁</li><li>拖放文件</li><li>在线播放</li><li>批量解锁</li><li>渐进式Web应用</li><li>多线程</li></ul><p><span id="usage"></span></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="使用已构建版本"><a href="#使用已构建版本" class="headerlink" title="使用已构建版本"></a>使用已构建版本</h4><ul><li><p>从<a href="https://github.com/ix64/unlock-music/releases/latest" target="_blank" rel="noopener">GitHub Release</a>下载已构建的版本</p><ul><li>本地使用请下载<code>legacy版本</code>（<code>modern版本</code>只能通过<strong>http/https协议</strong>访问）</li></ul></li><li><p>解压缩后即可部署或本地使用（<strong>请勿直接运行源代码</strong>）</p></li></ul><h4 id="自行构建"><a href="#自行构建" class="headerlink" title="自行构建"></a>自行构建</h4><ul><li>环境要求<ul><li>nodejs</li><li>npm</li></ul></li></ul><ol><li>获取项目源代码后执行 <code>npm install</code> 安装相关依赖</li><li>执行 <code>npm run build</code> 即可进行构建，构建输出为 dist 目录</li></ol><ul><li><code>npm run serve</code> 可用于开发</li></ul><h2 id="部署新站点"><a href="#部署新站点" class="headerlink" title="部署新站点"></a>部署新站点</h2><p>小编这边将解码的站点配置为二级域名：unlock.nhtzj.com</p><h3 id="设备-1"><a href="#设备-1" class="headerlink" title="设备"></a>设备</h3><ul><li>Mac pro</li><li>阿里云服务器(Centos7+Nginx)</li></ul><h3 id="添加二级域名解析"><a href="#添加二级域名解析" class="headerlink" title="添加二级域名解析"></a>添加二级域名解析</h3><p>在<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">阿里云域名解析网站</a>添加二级解析域名：unlock.nhtzj.com</p><p><img src="/images/2021/01/add-second-analysis.png" alt="add-second-analysis"></p><h3 id="添加站点文件"><a href="#添加站点文件" class="headerlink" title="添加站点文件"></a>添加站点文件</h3><ol><li><p>下载<a href="#modern_download">modern</a>版本</p></li><li><p>解压</p></li><li><p>将文件夹名称<code>modern</code> 改为 <code>unlock</code>，并对内部文件进行了微调</p></li><li><p>将<code>unlock</code>文件夹上传到服务器根目录<code>/var/www</code>下 ，上传使用scp命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 本地文件夹路径 服务器登录用户名@服务器IP地址:/var/www</span><br></pre></td></tr></table></figure><p>其中<code>-r</code>用于上传/下载文件夹。</p><p>如果本地路径和服务器路径交换下，就是从服务器下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 服务器登录用户名@服务器IP地址:/var/www/unlock 本地文件夹路径</span><br></pre></td></tr></table></figure></li></ol><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><p>现在我们已经添加的文件，但这些目录结构都为 root 用户所有。如果希望服务器上的普通用户也能够修改 web 目录下的文件，我们可以使用 chown 命令转移目录的所有者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown –R $USER:$USER /var/www/</span><br></pre></td></tr></table></figure><p>当你提交上述 chown 命令时，$USER 变量将会取值为当前登录服务器的用户。这样，我们的普通用户就取得了 www 子目录的所有权。</p><p>此外，我们还需要对这里的目录权限做一点修改，确保对一般的 web 目录及其内部的子目录和文件的读取都是被允许的，这样，网页才能正常地为访问者提供服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod –R 755 /var/www</span><br></pre></td></tr></table></figure><p>现在你的服务器应该已经取得了为向 web 站点访问者提供内容所需的权限，并且服务器上的用户现在应该能够在恰当的文件夹下创建内容</p><h3 id="添加新站点配置文件"><a href="#添加新站点配置文件" class="headerlink" title="添加新站点配置文件"></a>添加新站点配置文件</h3><p>nginx的配置路径是在：<code>/etc/nginx/</code></p><p>进入后，目录如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">cd</span> /etc/nginx/</span><br><span class="line"># ll</span><br><span class="line">total <span class="number">68</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> Jan <span class="number">23</span> <span class="number">20</span>:<span class="number">10</span> conf.d</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> Mar  <span class="number">6</span>  <span class="number">2018</span> default.d</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1077</span> Mar  <span class="number">6</span>  <span class="number">2018</span> fastcgi.conf</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1077</span> Mar  <span class="number">6</span>  <span class="number">2018</span> fastcgi.conf.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1007</span> Mar  <span class="number">6</span>  <span class="number">2018</span> fastcgi_params</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1007</span> Mar  <span class="number">6</span>  <span class="number">2018</span> fastcgi_params.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">2837</span> Mar  <span class="number">6</span>  <span class="number">2018</span> koi-utf</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">2223</span> Mar  <span class="number">6</span>  <span class="number">2018</span> koi-win</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">3957</span> Mar  <span class="number">6</span>  <span class="number">2018</span> mime.types</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">3957</span> Mar  <span class="number">6</span>  <span class="number">2018</span> mime.types.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">2588</span> Oct <span class="number">17</span>  <span class="number">2018</span> nginx.conf</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">2656</span> Mar  <span class="number">6</span>  <span class="number">2018</span> nginx.conf.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">636</span> Mar  <span class="number">6</span>  <span class="number">2018</span> scgi_params</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">636</span> Mar  <span class="number">6</span>  <span class="number">2018</span> scgi_params.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">664</span> Mar  <span class="number">6</span>  <span class="number">2018</span> uwsgi_params</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">664</span> Mar  <span class="number">6</span>  <span class="number">2018</span> uwsgi_params.default</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">3610</span> Mar  <span class="number">6</span>  <span class="number">2018</span> win-utf</span><br></pre></td></tr></table></figure><p>其中目录<code>conf.d</code>就是添加新站点配置的地方。</p><p>而<code>nginx.conf</code>为nginx的总配置文件，文件打开后可以看到如下，将<code>conf.d</code>目录下所有<code>conf</code>格式的文件都加载进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure><p>所以在<code>conf.d</code>内创建文件 <code>unlock.conf</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #listen <span class="number">80</span>;</span><br><span class="line">    root /var/www/unlock; # change to your <span class="built_in">dir</span> </span><br><span class="line">    server_name unlock.nhtzj.com;  # change to your service name(domain)</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    location / &#123;</span><br><span class="line">            # First attempt to serve request as file, then</span><br><span class="line">            # as directory, then fall back to displaying a <span class="number">404</span>.</span><br><span class="line">            try_files $uri $uri/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    error_log  /var/log/nginx/unlock.nhtzj.com_error.log;</span><br><span class="line"></span><br><span class="line">    error_page <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        location = /<span class="number">40</span>x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>现在可以在浏览器输入自己的域名查看效果了</p><p><a href="http://unlock.nhtzj.com" target="_blank" rel="noopener">http://unlock.nhtzj.com</a></p><h3 id="添加ssl证书"><a href="#添加ssl证书" class="headerlink" title="添加ssl证书"></a>添加ssl证书</h3><p>给新加的二级域名添加ssl证书。</p><p>由于小编之前已经创建过证书了所以这里就是给证书添加新域名的操作</p><p>由于新增时需要将证书内原有的域名信息也要加上，所以</p><ol><li><p>查询原有证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot certificates</span><br></pre></td></tr></table></figure></li><li><p>将查询到的Domains信息取出，并用逗号分隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --expand -d blog.nhtzj.com,www.nhtzj.com,unlock.nhtzj.com</span><br></pre></td></tr></table></figure></li></ol><p>具体示例可查看文章 <a href="/697484412/#certbot_certificates">Centos7使用certbot获取ssl证书#常用命令</a></p><p>现在可以在浏览器输入自己的域名查看效果了</p><p><a href="https://unlock.nhtzj.com" target="_blank" rel="noopener">https://unlock.nhtzj.com</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/b34c78bf9bf0" target="_blank" rel="noopener">CentOS 7 Apache 多端口部署 Web Apps 指南</a></p><p><a href="https://github.com/ix64/unlock-music" target="_blank" rel="noopener">unlock-music</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;p&gt;1月23日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例80例，其中境外输入病例15例（广东5例，
      
    
    </summary>
    
      <category term="生活" scheme="http://www.nhtzj.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://www.nhtzj.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="音乐解锁" scheme="http://www.nhtzj.com/tags/%E9%9F%B3%E4%B9%90%E8%A7%A3%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Android 横竖屏（手动+自动）</title>
    <link href="http://www.nhtzj.com/2134946563/"/>
    <id>http://www.nhtzj.com/2134946563/</id>
    <published>2020-08-02T13:43:20.000Z</published>
    <updated>2020-08-02T15:29:01.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><p>8月1日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例49例，其中境外输入病例16例（四川4例，山东3例，湖北3例，广东2例，陕西2例，上海1例，福建1例），本土病例33例（新疆30例，辽宁3例）；无新增死亡病例；无新增疑似病例。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新的效果涂上，手机在竖屏界面上没有点击触发App切换到横屏的功能按钮，但是却又有横屏的效果图，并且可以通过返回按钮退出横屏。经过一番思考后有了可行的方案。本篇记录该需求的具体实现过程。如要查看关于横竖屏的详细设置介绍，请查看文章 <a href="/3052045100">Android 动态切换全屏横屏</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用手机传感器检测设备方向 + 手动/自动设置屏幕方向</p><p>关于设备方向的监听，一般想到的是<code>SensorManager</code>，但系统在SDK3内就添加了<code>OrientationEventListener</code>抽象类来帮助监听设备方向。</p><p>再通过<code>setRequestedOrientation (int requestedOrientation)</code>来强制指定方向。</p><h2 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h2><h3 id="OrientationEventListener"><a href="#OrientationEventListener" class="headerlink" title="OrientationEventListener"></a>OrientationEventListener</h3><p><code>public abstract class OrientationEventListener</code><br><code>extends Object</code></p><table><thead><tr><th><a href="https://developer.android.com/reference/java/lang/Object" target="_blank" rel="noopener">java.lang.Object</a></th><th></th></tr></thead><tbody><tr><td>↳</td><td>android.view.OrientationEventListener</td></tr></tbody></table><hr><p>Helper class for receiving notifications from the SensorManager when the orientation of the device has changed.</p><p>即：监听设备方向的帮助类。</p><p>虽然是以 <strong>Listener</strong>结尾，但它不是接口类型，是抽象类，内部封装了 <code>SensorManager</code>相关的逻辑，用于监听设备当前角度，通过<code>onOrientationChanged(int orientation)</code>方法返回。</p><p>注：记得调用<code>OrientationEventListener.disable()</code>取消监听（注册），避免内存泄露。若需反复监听、取消操作，可通过<code>OrientationEventListener.enable()</code>、<code>OrientationEventListener.disable()</code>使监听有效/无效。</p><p><code>OrientationEventListener</code>相关实现类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义工具类</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实时的检测用户屏幕的位置改变，做到 重力感应 与 全屏/半屏按钮 逻辑的互容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrientationDetector</span> <span class="keyword">extends</span> <span class="title">OrientationEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mWeakReferenceActivity;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实时记录用户手机屏幕的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrientationDetector</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(activity);</span><br><span class="line">        mWeakReferenceActivity = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOrientationChanged</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判null</span></span><br><span class="line">        <span class="keyword">if</span> (mWeakReferenceActivity.get() == <span class="keyword">null</span> || mWeakReferenceActivity.get().isFinishing()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录用户手机上一次放置的位置</span></span><br><span class="line">        <span class="keyword">int</span> mLastOrientation = mOrientation;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) &#123;</span><br><span class="line">            <span class="comment">//手机平放时，检测不到有效的角度</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//重置为原始位置 -1</span></span><br><span class="line">            mOrientation = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 只检测是否有四个角度的改变</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (orientation &gt; <span class="number">350</span> || orientation &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//0度，用户竖直拿着手机</span></span><br><span class="line">            mOrientation = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orientation &gt; <span class="number">80</span> &amp;&amp; orientation &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="comment">//90度，用户右侧横屏拿着手机</span></span><br><span class="line">            mOrientation = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orientation &gt; <span class="number">170</span> &amp;&amp; orientation &lt; <span class="number">190</span>) &#123;</span><br><span class="line">            <span class="comment">//180度，用户反向竖直拿着手机</span></span><br><span class="line">            mOrientation = <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orientation &gt; <span class="number">260</span> &amp;&amp; orientation &lt; <span class="number">280</span>) &#123;</span><br><span class="line">            <span class="comment">//270度，用户左侧横屏拿着手机</span></span><br><span class="line">            mOrientation = <span class="number">270</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果用户关闭了手机的屏幕旋转功能，不再开启代码自动旋转了，直接return</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1 手机已开启屏幕旋转功能</span></span><br><span class="line"><span class="comment">             * 0 手机未开启屏幕旋转功能</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (Settings.System.getInt(mWeakReferenceActivity.get().getContentResolver(), Settings.System.ACCELEROMETER_ROTATION) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Settings.SettingNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当检测到用户手机位置距离上一次记录的手机位置发生了改变，开启屏幕自动旋转</span></span><br><span class="line">        <span class="keyword">if</span> (mLastOrientation != mOrientation) &#123;</span><br><span class="line">            mWeakReferenceActivity.get().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setRequestedOrientation"><a href="#setRequestedOrientation" class="headerlink" title="setRequestedOrientation"></a>setRequestedOrientation</h3><p>Change the desired orientation of this activity. If the activity is currently in the foreground or otherwise impacting the screen orientation, the screen will immediately be changed (possibly causing the activity to be restarted). Otherwise, this will be used the next time the activity is visible.</p><table><thead><tr><th style="text-align:left">Parameters</th><th></th></tr></thead><tbody><tr><td style="text-align:left"><code>requestedOrientation</code></td><td><code>int</code>: An orientation constant as used in <code>ActivityInfo#screenOrientation</code>. Value is android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSET, <code>ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED</code>, <code>ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE</code>, <code>ActivityInfo.SCREEN_ORIENTATION_PORTRAIT</code>, <code>ActivityInfo.SCREEN_ORIENTATION_USER</code>, <code>ActivityInfo.SCREEN_ORIENTATION_BEHIND</code>, <code>ActivityInfo.SCREEN_ORIENTATION_SENSOR</code>, <code>ActivityInfo.SCREEN_ORIENTATION_NOSENSOR</code>, <code>ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE</code>, <code>ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT</code>, <code>ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE</code>, <code>ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT</code>, <code>ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR</code>, <code>ActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE</code>, <code>ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT</code>, <code>ActivityInfo.SCREEN_ORIENTATION_FULL_USER</code>, or <code>ActivityInfo.SCREEN_ORIENTATION_LOCKED</code></td></tr></tbody></table><p>即：改变活动方向。</p><p>另外配合使用<code>setRequestedOrientation(int requestedOrientation)</code>进行强制横竖屏切换</p><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SimpleActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> OrientationDetector orientationDetector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Log.w(TAG, <span class="string">"onCreate: "</span>);</span><br><span class="line">        setContentView(R.layout.activity_simple);</span><br><span class="line">        tv = findViewById(R.id.tv);</span><br><span class="line">        tv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onClick: "</span> + getResources().getConfiguration().orientation);</span><br><span class="line">                <span class="keyword">if</span> (getResources().getConfiguration().orientation == ActivityInfo.SCREEN_ORIENTATION_USER) &#123;</span><br><span class="line">                    tv.setText(<span class="string">"我是竖屏"</span>);</span><br><span class="line">                    <span class="comment">//切竖屏</span></span><br><span class="line">                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tv.setText(<span class="string">"我是横屏"</span>);</span><br><span class="line">                    <span class="comment">//切横屏</span></span><br><span class="line">                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        orientationDetector = <span class="keyword">new</span> OrientationDetector(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        orientationDetector.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        orientationDetector.disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        Log.w(TAG, <span class="string">"onConfigurationChanged: "</span> + newConfig);</span><br><span class="line">        <span class="keyword">if</span> (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_USER) &#123;</span><br><span class="line">            tv.setText(<span class="string">"我是横屏"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tv.setText(<span class="string">"我是竖屏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;p&gt;8月1日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例49例，其中境外输入病例16例（四川4例，山
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="基础" scheme="http://www.nhtzj.com/categories/android/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="android" scheme="http://www.nhtzj.com/tags/android/"/>
    
      <category term="横竖屏" scheme="http://www.nhtzj.com/tags/%E6%A8%AA%E7%AB%96%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>基础不学好，加班跑不了（一）之ImageView</title>
    <link href="http://www.nhtzj.com/496990873/"/>
    <id>http://www.nhtzj.com/496990873/</id>
    <published>2020-07-20T15:20:42.000Z</published>
    <updated>2020-07-20T16:54:42.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>今天看到一篇文章，提到美国现总统唐纳德·特朗普和前总统贝拉克·侯赛因·奥巴马在任职期间对中国的影响，提到特朗普政府对中国是烫水煮青蛙，而奥巴马政府是温水煮青蛙。烫水虽然暂时是痛苦的，但能让我们立马清醒过来。美国政府自然是为美国人民考虑的。郑强教授也提到过，中国是个神奇的国家，越是对其搞封锁，反倒是越能干出花样来。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要记录在开发过程中由于部分基础不扎实导致的一些“加班”情况（浪费了太多时间啦）。</p><p>关于ImageView组件方面的一些细节就记录在本篇内。</p><h2 id="setColorFilter"><a href="#setColorFilter" class="headerlink" title="setColorFilter"></a>setColorFilter</h2><p><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/widget/ImageView.java" target="_blank" rel="noopener">ImageView</a>#<a href="https://developer.android.com/reference/android/widget/ImageView?hl=ru#setColorFilter(int, android.graphics.PorterDuff.Mode" target="_blank" rel="noopener">setColorFilter(int color, PorterDuff.Mode mode)</a>)</p><p>setColorFilter()用于给ImageView内容进行着色（tint），即改变原有内容的颜色。</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>而小编一开始写的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ImageView iv;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">iv.setBackgroundResource(R.drawable.ic_setting);</span><br><span class="line">iv.setColorFilter(ContextCompat.getColor(<span class="keyword">this</span>, R.color.colorPrimary), PorterDuff.Mode.SRC_IN);</span><br></pre></td></tr></table></figure><p>结果没有<code>setColorFilter()</code>没有起到效果。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>查看源码得知：</p><ol><li>ImageView.setColorFilter()方法是作用在成员变量mDrawable上的，即xml内ImageView标签的<code>android:src</code>属性</li><li>setBackgroundResource()方法是设置背景的，作用在ImageView的父类View的成员变量mBackground上的。</li></ol><p>所以总结下来就是上述无效果的代码是因为设置到了两个对象上，才会导致最终没有效果。</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>综上所述，修改方式有两种：</p><ol><li><p>图片资源和着色都设置到ImageView背景上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Drawable drawable = ContextCompat.getDrawable(<span class="keyword">this</span>, R.drawable.ic_setting);</span><br><span class="line"><span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">    drawable.setColorFilter(ContextCompat.getColor(<span class="keyword">this</span>, R.color.colorPrimary), PorterDuff.Mode.SRC_IN);</span><br><span class="line">    iv.setBackgroundDrawable(drawable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片资源和着色都设置到ImageView内容上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iv.setImageResource(R.drawable.ic_setting);</span><br><span class="line">iv.setColorFilter(ContextCompat.getColor(<span class="keyword">this</span>, R.color.colorPrimary), PorterDuff.Mode.SRC_IN);</span><br></pre></td></tr></table></figure></li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>setColorFilter()有3个重载方法，具体如下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets a tinting option for the image.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color Color tint to apply.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mode How to apply the color.  The standard mode is</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PorterDuff.Mode#SRC_ATOP&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@attr</span> ref android.R.styleable#ImageView_tint</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(<span class="keyword">int</span> color, PorterDuff.Mode mode)</span> </span>&#123;</span><br><span class="line">    setColorFilter(<span class="keyword">new</span> PorterDuffColorFilter(color, mode));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set a tinting option for the image. Assumes</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PorterDuff.Mode#SRC_ATOP&#125; blending mode.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color Color tint to apply.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@attr</span> ref android.R.styleable#ImageView_tint</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RemotableViewMethod</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    setColorFilter(color, PorterDuff.Mode.SRC_ATOP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply an arbitrary colorfilter to the image.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cf the colorfilter to apply (may be null)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getColorFilter()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(ColorFilter cf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mColorFilter != cf) &#123;</span><br><span class="line">        mColorFilter = cf;</span><br><span class="line">        mHasColorFilter = <span class="keyword">true</span>;</span><br><span class="line">        mColorMod = <span class="keyword">true</span>;</span><br><span class="line">        applyColorMod();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到最终都调用到了 <code>setColorFilter(ColorFilter cf)</code>方法上。<code>setColorFilter(ColorFilter cf)</code>内部又会调用<code>applyColorMod()</code>。其代码如下，可以看到最总是调用到了<code>mDrawable.setColorFilter(mColorFilter)</code>上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyColorMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Only mutate and apply when modifications have occurred. This should</span></span><br><span class="line">    <span class="comment">// not reset the mColorMod flag, since these filters need to be</span></span><br><span class="line">    <span class="comment">// re-applied if the Drawable is changed.</span></span><br><span class="line">    <span class="keyword">if</span> (mDrawable != <span class="keyword">null</span> &amp;&amp; mColorMod) &#123;</span><br><span class="line">        mDrawable = mDrawable.mutate();</span><br><span class="line">        <span class="keyword">if</span> (mHasColorFilter) &#123;</span><br><span class="line">            mDrawable.setColorFilter(mColorFilter);</span><br><span class="line">        &#125;</span><br><span class="line">        mDrawable.setXfermode(mXfermode);</span><br><span class="line">        mDrawable.setAlpha(mAlpha * mViewAlphaScale &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>mDrawable</code>通过查看源码内赋值的地方，可以确定为ImageView显示的内容（非背景）。因为源码内setImageBitmap、setImageDrawable、setImageResource、setImageURI、setImageIcon都是直接或间接调用了updateDrawable方法，其内部会将显示内容赋值给mDrawable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDrawable</span><span class="params">(Drawable d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d != mRecycleableBitmapDrawable &amp;&amp; mRecycleableBitmapDrawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRecycleableBitmapDrawable.setBitmap(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> sameDrawable = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mDrawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sameDrawable = mDrawable == d;</span><br><span class="line">        mDrawable.setCallback(<span class="keyword">null</span>);</span><br><span class="line">        unscheduleDrawable(mDrawable);</span><br><span class="line">        <span class="keyword">if</span> (!sCompatDrawableVisibilityDispatch &amp;&amp; !sameDrawable &amp;&amp; isAttachedToWindow()) &#123;</span><br><span class="line">            mDrawable.setVisible(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看这里哦</span></span><br><span class="line">    mDrawable = d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</span><br><span class="line">        d.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        d.setLayoutDirection(getLayoutDirection());</span><br><span class="line">        <span class="keyword">if</span> (d.isStateful()) &#123;</span><br><span class="line">            d.setState(getDrawableState());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sameDrawable || sCompatDrawableVisibilityDispatch) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> visible = sCompatDrawableVisibilityDispatch</span><br><span class="line">                    ? getVisibility() == VISIBLE</span><br><span class="line">                    : isAttachedToWindow() &amp;&amp; getWindowVisibility() == VISIBLE &amp;&amp; isShown();</span><br><span class="line">            d.setVisible(visible, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        d.setLevel(mLevel);</span><br><span class="line">        mDrawableWidth = d.getIntrinsicWidth();</span><br><span class="line">        mDrawableHeight = d.getIntrinsicHeight();</span><br><span class="line">        applyImageTint();</span><br><span class="line">        applyColorMod();</span><br><span class="line"></span><br><span class="line">        configureBounds();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mDrawableWidth = mDrawableHeight = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h2&gt;&lt;p&gt;今天看到一篇文章，提到美国现总统唐纳德·特朗普和前总统贝拉克·侯赛因·奥巴马在任职期间对中国的影响，提到特朗普政府对中国是烫水煮青蛙
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="系统组件" scheme="http://www.nhtzj.com/categories/android/%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="系统组件" scheme="http://www.nhtzj.com/tags/%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/"/>
    
      <category term="ImageView" scheme="http://www.nhtzj.com/tags/ImageView/"/>
    
  </entry>
  
  <entry>
    <title>Android开发8年，阿里、百度一面惨被吊打！我是否应该转行了？</title>
    <link href="http://www.nhtzj.com/536712598/"/>
    <id>http://www.nhtzj.com/536712598/</id>
    <published>2020-07-11T14:33:38.000Z</published>
    <updated>2020-07-11T15:13:20.721Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://yq.aliyun.com/articles/754207" target="_blank" rel="noopener">https://yq.aliyun.com/articles/754207</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="/images/2020/07/change-profession-bg.jpeg" alt="背景"></p><p>2020年1月5号，朋友辞去了北京一家小创公司Android开发的工作，准备春节过后寻找新的工作的时候，突然遇到了新冠疫情的爆发，至今赋闲在家。昨天接到同行好友的电话，要和我聊聊天。告诉我再找不到工作就考虑转行了！</p><p><img src="/images/2020/07/change-profession-chat.jpeg" alt="聊天记录"></p><p>话语间无不感叹安卓有点强弩之末的味道！聊天过程中，朋友也顺带分享了一波阿里饿了么、百度Android岗的面经。我也帮他内推了几份工作岗位，却因为技术欠缺和经验不足等问题被友好的回绝了！</p><h3 id="饿了么Android岗一面"><a href="#饿了么Android岗一面" class="headerlink" title="饿了么Android岗一面"></a>饿了么Android岗一面</h3><p>1：双亲委托机制？<br>2：插件化原理？<br>3：垃圾回收机制及其优缺点？<br>4：PathClassLoader和DexClassLoader区别？<br>5：说下Binder？<br>6：Android旋转屏幕后Activity生命周期，Bundle是存储在哪儿的？<br>7：事件分发机制？<br>8：Handler实现？<br>9：Java内存？<br>10：OkHttp设计模式？<br>11：算法。</p><p>Http和Https的区别<br>HashMap的具体实施原理，HashMap和Hashset的区别<br>Java的垃圾回收机制<br>JVM的原理及线上调优<br>string,stringbulider,stringbuffer的区别<br>Java的设计模式<br>在白纸上手写二分法排序算法，这道题我在lintcode上面做过原题<br>有哪些可以保持进程同步的方法<br>如何避免死锁<br>常见的数据结构有哪些<br>leetcode 原题：查找单链表中倒数第K个节点的算法，面试官要求手写</p><h3 id="百度Android岗一面"><a href="#百度Android岗一面" class="headerlink" title="百度Android岗一面"></a>百度Android岗一面</h3><p>1：算法：寻找出现超过一半的数字？<br>2：HashMap原理？<br>3：热更新原理？<br>4：AstncTask+HttpClient 与 AsyncHttpClient有什么区别？<br>5：Https握手过程？<br>6：RecycleView原理？<br>7：RecycleView的使用？<br>8：Hybrid通信原理是什么，有做研究吗？<br>9：ListView图片加载错乱的原理和解决方案？<br>10：对称加密与非对称加密？<br>11：TCP、UDP差别？<br>12：TCP保证可靠的手段？</p><h2 id="初级、中级-Android-工程师可能因离职而失业吗？"><a href="#初级、中级-Android-工程师可能因离职而失业吗？" class="headerlink" title="初级、中级 Android 工程师可能因离职而失业吗？"></a>初级、中级 Android 工程师可能因离职而失业吗？</h2><p>针对朋友找工作难的问题，我特意咨询了我在腾讯负责面试的朋友，为何Android开发普遍感觉找工作难。最后我们得出的结论基本一致：供需极度的不平衡。</p><p>这段时间他都在帮部门招人，在拉钩上也挂了JD，一个多月的时间收到的简历估计有几百份，他发起了面试的不超过5个，最后硬着头皮递上去1个还被刷了。</p><p>可问题就在这里，据他反馈大公司都在招Android开发，很多部门还非常着急，但就是招不到合适的人。别跟他说现在做Android的人很多，质量是关键，数量一点意义都没有。每年池子里的人就那么多，一份好的简历出来不止公司之间，部门之间甚至是部门内都在抢，但这批人之外，绝大部分人的简历能占用的时间不会超过5秒。</p><p>以前我们沟通时他就提到过这个问题，在现在这个阶段，公司之间的技术鸿沟已经非常明显，开发者身在其中，也因为自身学习能力，环境，项目等等的差别，技术上的差距越拉越大，造成了工作几年之后的两级分化，并且这种差距的拉开不是靠自己的努力就能弥补的。</p><p>我这个Android开发八年的朋友，离职后缺乏大型项目经验，至今未找到合适的工作！属于一个典型温水煮青蛙的案例！</p><h2 id="Android学习路线指南"><a href="#Android学习路线指南" class="headerlink" title="Android学习路线指南"></a>Android学习路线指南</h2><p><strong>那面对这种情况，作为开发者，我们能做的是什么？最基本的，脱离舒适区，不停磨练自己的技术。</strong></p><p>工作前三年是职业生涯中成长最快的几年，在这段时间里你会充满激情，做事专注，也容易养成良好的习惯。在大公司有些同学在前三年中就快速成为某一个领域的技术专家，有些同学也可能止步不前。接下来和大家一起探讨下如何在三年内快速成长为一名技术专家。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><strong>学习方法</strong><br>1：掌握良好的学习心态<br>2：掌握系统化的学习方法<br>3：知识如何内化成能力<br>4：广度和深度的选择</p><p><strong>1.掌握良好的学习心态</strong></p><p><strong>空杯心态</strong><br>首先要有空杯的学习心态，而不是傲娇自满，故步自封，空杯子才可以装下更多的东西。首先要学会取百家之长，带着欣赏的眼光看团队的同事或学校的同学，欣赏每位同事或同学的优点，然后吸取他们的优点，每个同事都有其擅长的能力，比如有的同事技术能力强，那么可以观察下他如何学习的（或者找他请教学习方法），有的同学擅长解决线上问题，那么观察他是如何解决线上问题的，解决思路是什么？如果他解决不了时，他是如何寻求帮助。有的同学擅长使用IDE或MAC的快捷键，那么可以向他学习提高工作效率。有的同学能快速理解业务知识，观察他是如何做到的，自己如何达到他的程度。沟通能力，解决问题能力以及规划能力都可以向同事学习。</p><p><strong>坚持学习</strong><br>有的同学可能工作了五年，但是学习的时间可能一年都不到。学技术不能急于求成，只要学习方法正确，量变一定会引起质变。</p><p><strong>2.掌握系统化的学习方法</strong><br>如果学习到的知识不成体系，那么遇到问题时就会非常难解决。有些同学会出现这些情况，比如编码时遇到问题百度搜索，如果百度上找不到答案，这个问题就解决不了。再比如，在开发中要用到某个技术点，就学习下API，程序调通后就不再深入研究，浅尝辄止，如果程序遇到其他问题也不知道如何解决。</p><p>以上情况我认为叫<strong>点状学习</strong>。遇到一个问题，解决一个问题，需要一项技术，学习一项技术。那么如何由点到面，由面到体，形成系统化学习呢。</p><p>首先要确定学习的知识领域，需要达成的学习目标，针对目标制定学习计划，就像你要写一本书一样，先把目录写出来，然后根据目录上的知识点逐步去学习，最后把这些知识点关联起来，形成一个系统化的知识体系。学习的时候，可以制定一个计划，以周为单位，比如第一周学什么，第二周学什么。</p><p>比如我们Android开发，学习进阶路线是：</p><p><img src="/images/2020/07/structure-tree.jpeg" alt="Android开发进阶学习图谱"></p><p><strong>3.知识如何内化成能力</strong><br>成长必须经历一个步骤，就是把知识内化成能力。知识是用脑记住的，能力是用手练习出来的。在工作的几年里，我们可能看过很多书，听过很多技术讲座和视频，但是通过听和看只是让你能记住这些知识，这些知识还不能转换成你的能力。</p><p>听和看只是第一步，更重要的是实践，通过刻意练习把听到和看到的知识内化成你的能力。</p><p>刻意练习，就是有目的的练习，先规划好，再去练习。</p><p><strong>4.广度和深度的选择</strong><br>技术人员的学习路径有两个维度，深度和广度。很多程序员都有这个疑问，是先深后广，还是先广后深呢？</p><p>通过这么多年的学习和思考，我的建议先深后广，因为当技术学到一定深度后，就会有触类旁通的能力，自己掌握的广度也自然有了深度。但是在实际学习过程中，深度和广度相互穿插着学习，比如学习并发编程时，首先学习JDK源码，然后学进去之后，开始看JVM源码，最后看CPU架构，在技术点逐渐深度研究的过程中，广度也得到了完善。</p><p>所以无论哪种学习方式，学习态度才是最重要的，在广度学习的时候有深入研究的态度就能达到一定的深度，在深度学习的时候，主动学习相关的技术点，广度也得到拓宽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;https://yq.aliyun.com/articles/754207&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yq.aliyun.com/articles/754207&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="转行" scheme="http://www.nhtzj.com/categories/android/%E8%BD%AC%E8%A1%8C/"/>
    
    
      <category term="转行" scheme="http://www.nhtzj.com/tags/%E8%BD%AC%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>2020大厂最新常见面试题-Java</title>
    <link href="http://www.nhtzj.com/1230782228/"/>
    <id>http://www.nhtzj.com/1230782228/</id>
    <published>2020-07-10T14:23:34.000Z</published>
    <updated>2023-09-05T16:41:12.325Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自JavaGuide读者圈</p></blockquote><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote><p>Java 基础这部分一些简单的问题就直接没有放上来。</p></blockquote><p><strong>基础：</strong></p><ol><li>Java 反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？</li><li>谈谈对 Java 注解的理解，解决了什么问题？</li><li>内部类了解吗？匿名内部类了解吗？</li><li>BIO和NIO区别,4核cpu，100个http连接，用BIO和NIO分别需要多少个线程</li><li>假如我们需要存500个数需要多大的HashMap？</li><li>HashMap的负载因子。</li></ol><p><strong>jvm:</strong></p><ol><li>jvm 内存结构</li><li>jvm 调优参数</li><li>什么是类加载？</li><li>何时类加载？</li><li>java的类加载流程？</li><li>知道哪些类加载器。类加载器之间的关系？</li><li>类加载器之间的关系？</li><li><strong>类加载器的双亲委派</strong> （结合tomcat说一下双亲委派）</li><li><strong>为什么需要双亲委派</strong></li><li>Java内存模型</li><li>栈中存放什么数据，堆中呢？</li><li>大对象放在哪个内存区域</li><li>堆区如何分类</li><li>垃圾回收有哪些算法</li><li>GC的全流程</li><li>GC中老年代用什么回收方法？</li></ol><p><strong>多线程：</strong></p><ol><li><strong>Java线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？</strong></li><li>死锁</li></ol><p><strong>设计模式：</strong></p><ol><li>阅读Spring源码的时候什么设计模式最让你影响深刻？如何使用？</li><li>单例模式，单例模式的使用场景</li><li>观察者模式，观察者模式的使用场景</li></ol><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ol><li>spring boot和spring的区别</li><li>ioc 和 aop(ioc流程、aop实现原理)、spring aop异常处理、当一段代码被try catch后再发生异常时，aop的异常通知是否执行，为什么？</li><li>spring bean的生命周期说一下</li><li>spring data jpa底层是什么？</li><li>hibernate和mybatis区别</li><li>spring boot 过滤器</li><li>spring boot 拦截器</li><li>Spring动态代理默认用哪一种</li><li>写出spring jdk动态代理的实现。</li><li>画出spring boot处理一个http请求的全过程</li></ol><p><strong>推荐</strong></p><ol><li>手写实现Spring核心功能： <a href="https://github.com/jinzzzzz/spring-demo" target="_blank" rel="noopener">https://github.com/jinzzzzz/spring-demo</a></li></ol><h3 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h3><ol><li>认证 (Authentication) 和授权 (Authorization)的区别是什么？</li><li>什么是Cookie ? Cookie的作用是什么?如何在服务端使用 Cookie ?</li><li>Cookie 和 Session 有什么区别？如何使用Session进行身份验证？</li><li>如果没有Cookie的话Session还能用吗？</li><li>为什么Cookie 无法防止CSRF攻击，而token可以？</li><li>什么是 Token?什么是 JWT?如何基于Token进行身份验证？</li><li>什么是OAuth 2.0？</li><li>什么是SSO(单点登录)</li></ol><blockquote><p>这部分问题答案整理在了这里：<a href="https://snailclimb.gitee.io/javaguide/#/docs/system-design/authority-certification/basis-of-authority-certification" target="_blank" rel="noopener">https://snailclimb.gitee.io/javaguide/#/docs/system-design/authority-certification/basis-of-authority-certification</a></p></blockquote><h3 id="微服务-分布式"><a href="#微服务-分布式" class="headerlink" title="微服务/分布式"></a>微服务/分布式</h3><ol><li>为什么要网关？</li><li>限流的算法有哪些？</li><li>为什么要分布式 id ？分布式 id 生成策略有哪些？</li><li>了解RPC吗？有哪些常见的 RPC 框架？</li><li>如果让你自己设计 RPC 框架你会如何设计？</li><li>Dubbo 了解吗？Spring Cloud 了解吗？</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>非关系型数据库和关系型数据库的区别？</li><li><strong>事务的四大特性</strong></li><li><strong>MySQL 事务隔离级别？默认是什么级别？</strong></li><li><strong>乐观锁与悲观锁的区别</strong></li><li>数据库两种存储引擎的区别</li><li>最左前缀匹配原则及它的原因</li><li>大表优化的思路</li><li><strong>where和having的区别</strong></li><li>分库分表</li><li><strong>explain 命令</strong></li></ol><p><strong>索引</strong></p><ol><li><strong>如何加快数据库查询速度</strong></li><li><strong>聚集索引和非聚集索引的区别</strong></li><li><strong>什么时候不该使用索引？</strong></li><li><strong>索引底层的数据结构？</strong></li><li><strong>B+树做索引比红黑树好在哪里？</strong></li><li>6.</li></ol><p><strong>Redis:</strong></p><ol><li>项目中 redis 是怎么用的？解决了什么问题？</li><li>说一下有缓存情况下查询的流程以及有缓存情况下修改的流程。</li><li>redis有哪些数据结构</li><li>redis内存满了怎么办</li><li>redis内存淘汰算法除了lru还有哪些</li><li>分布式缓存可能出现的问题</li><li>缓存穿透问题</li></ol><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ol><li><strong>计算机网络的一些常见状态码</strong></li><li>ping 所使用的协议</li><li><strong>TCP的三次握手与四次挥手的内容</strong></li><li><strong>TCP为什么连接是三次握手而断开是四次握手</strong></li><li>TCP与UDP的区别及使用场景</li><li><strong>一次完整的HTTP请求所经的步骤</strong></li><li>http 如何保存登录信息(没太搞懂意思)</li><li><strong>Cookie 和 Session的关系</strong></li></ol><h3 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h3><p><strong>算法</strong></p><ol><li>LRU 算法了解吗？你能实现一个吗？</li><li>写排序算法（快排、堆排）</li></ol><p><strong>数据结构</strong></p><ol><li>布隆过滤器了解吗？</li></ol><h3 id="设计题"><a href="#设计题" class="headerlink" title="设计题"></a>设计题</h3><ol><li>假如有10亿个数，只有一个重复，内存只能放下5亿个数，怎么找到这个重复的数字？</li><li>如何设计一个秒杀系统（服务端、数据库、分布式）？分布式系统的设计？</li><li>有一个服务器专门接收大量请求，怎么设计？</li><li>如果让你自己设计 RPC 框架你会如何设计？</li><li>怎么快速出现一个stackoverflow错误？</li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li>自我介绍。</li><li>说说你的项目中的亮点有哪些。</li><li>画一下你的项目的架构图。</li><li><strong>Restful 了解吗？简单说一下自己对它的认识，如果我要返回一个 boolean 类型的数据怎么办？</strong></li></ol><h3 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h3><ol><li>多面试，不要害怕失败，多总结经验。</li><li>尽早准备，不论是找工作前、面试前还是面试后。</li><li>熟悉自己的简历。</li><li>电话和视频面试很平常，面试前提前准备一下。</li><li>坚持！offer 虽然可能会迟到，但是只要不放弃，就一定不会缺席。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自JavaGuide读者圈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://www.nhtzj.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nhtzj.com/tags/Java/"/>
    
      <category term="面试" scheme="http://www.nhtzj.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="知识点" scheme="http://www.nhtzj.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Java 优秀内容收集</title>
    <link href="http://www.nhtzj.com/622731706/"/>
    <id>http://www.nhtzj.com/622731706/</id>
    <published>2020-07-10T13:58:27.000Z</published>
    <updated>2020-07-10T15:46:10.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇章主要记录从各方收集来的优秀篇章，</p><p>主要来源：</p><ul><li>JavaGuide读者圈</li></ul><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><a href="https://www.nowcoder.com/discuss/448243" target="_blank" rel="noopener">字节跳动 抖音后端 一二三面面经（已意向书） 何人听我楚狂声</a></p><p><a href="/1230782228">2020大厂最新常见面试题</a></p><p>项目相关： </p><p>1、你觉得项目里给里最大的挑战是什么？遇到了什么问题？如何解决的？从中学到了什么？ </p><p>2、项目的架构图能画一下不？ 数据库: </p><p>3、讲一下乐观锁和悲观锁; </p><p>4、说一下MVCC </p><p>5、说一聚簇索引和非聚簇索引的有什么不同 </p><p>6、关于索引的各种轰炸 JVM： </p><p>7、 讲一下JVM的内存结构（还问了每个区域的调优配置参数，我蒙了~~~） ~~</p><p>8、Minor gc 和 Full gc 的区别，详细介绍 </p><p>9、各种垃圾回收算法和回收器，说出自己的理解 </p><p>10、zgc ？？？zgc vs g1？？? 我懵逼了~~~ 多线程： ~~</p><p>11、ReetrantLock和synchronized的区别 </p><p>12、AQS  除了这些还问了 Spring AOP和IOC的底层实现、HashMap的底层实现等非常常见的问题，这里就不多提了~~</p><h2 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h2><p><a href="https://www.zhihu.com/question/31151832/answer/1048007912" target="_blank" rel="noopener">零基础如何系统学习Java Web？</a></p><h2 id="算法类开源项目"><a href="#算法类开源项目" class="headerlink" title="算法类开源项目"></a>算法类开源项目</h2><ol><li><p>CS-Notes：这个开源项目不是单一关注算法的仓库，它是一个大的集合，包括了技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计等知识。<a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">GitHub - CyC2018/CS-Notes: 技术面试必备基础知识、Leetcode、计算机…</a> </p></li><li><p>LeetCodeAnimation]:边看动画变学算法的话。<a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">GitHub - MisterBooo/LeetCodeAnimation: Demonstrate…</a> </p></li><li><p>leetcode：多种编程语言实现 LeetCode、《剑指 Offer（第 2 版）》、《程序员面试金典（第 6 版）》题解。<a href="https://github.com/doocs/leetcode" target="_blank" rel="noopener">GitHub - doocs/leetcode: 😏 LeetCode solutions in a…</a> </p></li><li><p>LeetCode-Solution-in-Good-Style:: <a href="https://github.com/liweiwei1419/LeetCode-Solution-in-Good-Style" target="_blank" rel="noopener">https://github.com/liweiwei1419/LeetCode-Solution-…</a></p></li></ol><p><a href="https://github.com/wolverinn/Waking-Up" target="_blank" rel="noopener">GitHub - wolverinn/Waking-Up: 计算机基础（计算机网络/操作系统/数据库/Git…）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题 追问 答案】的形式，即拿即用，直击互联网大厂面试 ；可用于模拟面试、面试前复习、短期内快速备战面试…</a>（计算机基础（计算机网络/操作系统/数据库/Git…）面试问题全面总结，包含详细的follow-up question以及答案；全部采用【问题+追问+答案】的形式，即拿即用，直击互联网大厂面试🚀；可用于模拟面试、面试前复习、短期内快速备战面试…）</p><h2 id="应届生后端-偏Java-学习指南"><a href="#应届生后端-偏Java-学习指南" class="headerlink" title="应届生后端(偏Java)学习指南"></a>应届生后端(偏Java)学习指南</h2><ol><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">GitHub - kamranahmedse/developer-roadmap: Roadmap …</a> (Github上很火的web开发人员学习路线，有中文翻译的版本) </li><li><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">GitHub - xingshaocheng/architect-awesome: 后端架构师技术图…</a> (后端架构师技术图谱！对于后端的知识体系涵盖的很全，非常适合作为整个后端学习可以参考的路线) </li><li><a href="https://github.com/hollischuang/toBeTopJavaer" target="_blank" rel="noopener">GitHub - hollischuang/toBeTopJavaer: To Be Top Jav…</a> (Java工程师成神之路！阿里巴巴技术专家开源的 Java 学习知识体系，内容巨多，需要筛选出比较重要的部分) </li><li><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">GitHub - Snailclimb/JavaGuide: 【Java学习 面试指南】 一份涵盖大…</a> (【Java学习+面试指南】 一份涵盖大部分Java程序员所需要掌握的核心知识。)</li></ol><h2 id="爬虫集合"><a href="#爬虫集合" class="headerlink" title="爬虫集合"></a>爬虫集合</h2><p><a href="https://github.com/facert/awesome-spider" target="_blank" rel="noopener">GitHub - facert/awesome-spider: 爬虫集合</a> </p><h2 id="美团点评技术年货"><a href="#美团点评技术年货" class="headerlink" title="美团点评技术年货"></a>美团点评技术年货</h2><p>【后台篇】：<a href="http://dpurl.cn/DPm3hdo" target="_blank" rel="noopener">http://dpurl.cn/DPm3hdo</a> </p><p>【算法篇】：<a href="http://dpurl.cn/gIIjhRw" target="_blank" rel="noopener">http://dpurl.cn/gIIjhRw</a> </p><p>【大数据篇】：<a href="http://dpurl.cn/Lb7j5xA" target="_blank" rel="noopener">http://dpurl.cn/Lb7j5xA</a> </p><p>【前端篇】：<a href="http://dpurl.cn/Xy6IOU4" target="_blank" rel="noopener">http://dpurl.cn/Xy6IOU4</a> </p><p>【学术论文篇】：<a href="http://dpurl.cn/4KE72hn" target="_blank" rel="noopener">http://dpurl.cn/4KE72hn</a> </p><p>【2019美团点评技术文章合辑】：<a href="http://dpurl.cn/9zvkFYe" target="_blank" rel="noopener">http://dpurl.cn/9zvkFYe</a> </p><p>美团技术团队的博客在这里：<a href="https://tech.meituan.com/" target="_blank" rel="noopener">美团技术团队</a></p><h2 id="docsify搭建文档类型网站"><a href="#docsify搭建文档类型网站" class="headerlink" title="docsify搭建文档类型网站"></a>docsify搭建文档类型网站</h2><p>视频教程地址：<a href="https://www.bilibili.com/video/BV1xz4y1X7Xo/。" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1xz4y1X7Xo/。</a> </p><p>docsify的官网教程的也很详细了，地址在这里：<a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">docsify</a> 。 </p><p>演示内容的素材在这里：<a href="https://github.com/Snailclimb/docsify-demo" target="_blank" rel="noopener">GitHub - Snailclimb/docsify-demo: 手把手教你搭建一个文档类型的网站…</a> </p><p>最终效果展示地址：<a href="https://snailclimb.gitee.io/docsify-demo/#/" target="_blank" rel="noopener">docsify-demo</a></p><h2 id="权限管理框架"><a href="#权限管理框架" class="headerlink" title="权限管理框架"></a>权限管理框架</h2><p>艿艿的 《Spring Boot 安全框架 Spring Security 入门》：<a href="http://www.iocoder.cn/Spring-Boot/Spring-Security/?github" target="_blank" rel="noopener">芋道 Spring Boot 安全框架 Spring Security 入门 | 芋道源码 —— 纯源码解析博客</a> </p><p>Guide的《从零入门 ！Spring Security With JWT（含权限验证）后端部分代码。》：<a href="https://github.com/Snailclimb/spring-security-jwt-guide" target="_blank" rel="noopener">GitHub - Snailclimb/spring-security-jwt-guide: 从零入门 ！Spring Security With JWT（含权限验证）后端部分代码。</a> </p><p>江南一点雨的Spring Security 系列教也很不错： <a href="https://www.javaboy.org/categories/Spring-Security/" target="_blank" rel="noopener">https://www.javaboy.org/categories/Spring-Security/</a></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><a href="https://mp.weixin.qq.com/s/iGE4-3Nb3fqoTJDjH3X3BQ" target="_blank" rel="noopener">不聊原理，拿来即用的线程池最佳实践</a></p><h2 id="Redis相关优质学习资源推荐"><a href="#Redis相关优质学习资源推荐" class="headerlink" title="Redis相关优质学习资源推荐"></a>Redis相关优质学习资源推荐</h2><p>书籍/专栏： </p><ol><li><p>《Redis 实战》：如果你想了解 Redis 的一些概念性知识的话，这本书真的非常不错。 </p></li><li><p>《Redis 设计与实现》：深入学习 Redis 必看。 </p></li><li><p>《Redis 深度历险：核心原理与应用实践》 ：通俗的语言带你学会Redis。 </p></li></ol><p>文章：</p><ol><li><p>缓存那些事-美团技术团队：<a href="https://tech.meituan.com/2017/03/17/cache-about.html" target="_blank" rel="noopener">缓存那些事 - 美团技术团队</a> </p></li><li><p>JavaGuide-redis专栏：<a href="https://github.com/Snailclimb/JavaGuide#redis" target="_blank" rel="noopener">GitHub - Snailclimb/JavaGuide: 「Java学习 面试指南」一份涵盖大部分Java程序员所需要掌握的核心知识。</a> </p></li><li>大厂面试！我和面试官之间关于Redis的一场对弈！：<a href="https://sourl.cn/j4Hbr9" target="_blank" rel="noopener">https://sourl.cn/j4Hbr9</a> </li><li>【面试】吃透了这些Redis知识点，面试官一定觉得你很NB（干货 | 建议珍藏）:<a href="https://sourl.cn/xFTW8n" target="_blank" rel="noopener">https://sourl.cn/xFTW8n</a> </li><li>3w字深度好文|Redis面试全攻略，读完这个就可以和面试官大战几个回合了：<a href="https://juejin.im/post/5e520c0b6fb9a07ca5303bf5" target="_blank" rel="noopener">3w字深度好文|Redis面试全攻略，读完这个就可以和面试官大战几个回合了 - 掘金</a> </li><li>【求锤得锤的故事】Redis锁从面试连环炮聊到神仙打架。:<a href="https://mp.weixin.qq.com/s/gOYWLg3xYt4OhS46woN_Lg" target="_blank" rel="noopener">【求锤得锤的故事】Redis锁从面试连环炮聊到神仙打架。</a></li></ol><p><a href="https://coding.imooc.com/class/ds/151" target="_blank" rel="noopener">慕课网-一站式学习Redis 从入门到高可用分布式实践</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇章主要记录从各方收集来的优秀篇章，&lt;/p&gt;
&lt;p&gt;主要来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaGuide读者圈&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="Java" scheme="http://www.nhtzj.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nhtzj.com/tags/Java/"/>
    
      <category term="面试" scheme="http://www.nhtzj.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="知识点" scheme="http://www.nhtzj.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>DialogFragment 监听外部点击事件</title>
    <link href="http://www.nhtzj.com/14209615/"/>
    <id>http://www.nhtzj.com/14209615/</id>
    <published>2020-06-21T05:00:09.000Z</published>
    <updated>2020-06-21T14:03:20.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><h3 id="国内疫情"><a href="#国内疫情" class="headerlink" title="国内疫情"></a>国内疫情</h3><p>6月20日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例26例，其中境外输入病例1例（在福建），本土病例25例（北京22例，河北3例）；无新增死亡病例；新增疑似病例3例，均为本土病例（均在北京）。</p><h3 id="国际疫情"><a href="#国际疫情" class="headerlink" title="国际疫情"></a>国际疫情</h3><p>世界卫生组织20日公布的最新数据显示，中国以外新冠确诊病例达到8440072例。 　　</p><p>世卫组织每日疫情报告显示，截至欧洲中部时间20日10时（北京时间16时），中国以外新冠确诊病例较前一日增加138950例，达到8440072例；中国以外死亡病例较前一日增加6271例，达到452328例。 　　全球范围内，新冠确诊病例较前一日增加138980例，达到8525042例；死亡病例较前一日增加6271例，达到456973例。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要记录使用DialogFragment实现的弹框，对点击非内容区域事件的监听和控制。</p><p>这个需求在着手实现之初，就断定是需要从事件的分发机制处展开的。</p><h2 id="实现过程分析"><a href="#实现过程分析" class="headerlink" title="实现过程分析"></a>实现过程分析</h2><p>DialogFragment 显示Dialog的具体流程为：</p><p>FragmentManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(Fragment f, <span class="keyword">int</span> newState, <span class="keyword">int</span> transit, <span class="keyword">int</span> transitionStyle,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> keepActive)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">                 <span class="keyword">switch</span> (f.mState) &#123;</span><br><span class="line">                <span class="keyword">case</span> Fragment.INITIALIZING:</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"moveto CREATED: "</span> + f);</span><br><span class="line">                    <span class="keyword">if</span> (f.mSavedFragmentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        f.mSavedFragmentState.setClassLoader(mHost.getContext().getClassLoader());</span><br><span class="line">                        f.mSavedViewState = f.mSavedFragmentState.getSparseParcelableArray(</span><br><span class="line">                                FragmentManagerImpl.VIEW_STATE_TAG);</span><br><span class="line">                        f.mTarget = getFragment(f.mSavedFragmentState,</span><br><span class="line">                                FragmentManagerImpl.TARGET_STATE_TAG);</span><br><span class="line">                        <span class="keyword">if</span> (f.mTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            f.mTargetRequestCode = f.mSavedFragmentState.getInt(</span><br><span class="line">                                    FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG, <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        f.mUserVisibleHint = f.mSavedFragmentState.getBoolean(</span><br><span class="line">                                FragmentManagerImpl.USER_VISIBLE_HINT_TAG, <span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!f.mUserVisibleHint) &#123;</span><br><span class="line">                            f.mDeferStart = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">if</span> (newState &gt; Fragment.STOPPED) &#123;</span><br><span class="line">                                newState = Fragment.STOPPED;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    f.mHost = mHost;</span><br><span class="line">                    f.mParentFragment = mParent;</span><br><span class="line">                    f.mFragmentManager = mParent != <span class="keyword">null</span></span><br><span class="line">                            ? mParent.mChildFragmentManager : mHost.getFragmentManagerImpl();</span><br><span class="line">                    dispatchOnFragmentPreAttached(f, mHost.getContext(), <span class="keyword">false</span>);</span><br><span class="line">                    f.mCalled = <span class="keyword">false</span>;</span><br><span class="line">                    f.onAttach(mHost.getContext());</span><br><span class="line">                    <span class="keyword">if</span> (!f.mCalled) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(<span class="string">"Fragment "</span> + f</span><br><span class="line">                                + <span class="string">" did not call through to super.onAttach()"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (f.mParentFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mHost.onAttachFragment(f);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        f.mParentFragment.onAttachFragment(f);</span><br><span class="line">                    &#125;</span><br><span class="line">                    dispatchOnFragmentAttached(f, mHost.getContext(), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!f.mRetaining) &#123;</span><br><span class="line">                        f.performCreate(f.mSavedFragmentState);</span><br><span class="line">                        dispatchOnFragmentCreated(f, f.mSavedFragmentState, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        f.restoreChildFragmentState(f.mSavedFragmentState);</span><br><span class="line">                        f.mState = Fragment.CREATED;</span><br><span class="line">                    &#125;</span><br><span class="line">                    f.mRetaining = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (f.mFromLayout) &#123;</span><br><span class="line">                        <span class="comment">// For fragments that are part of the content view</span></span><br><span class="line">                        <span class="comment">// layout, we need to instantiate the view immediately</span></span><br><span class="line">                        <span class="comment">// and the inflater will take care of adding it.</span></span><br><span class="line">                        f.mView = f.performCreateView(f.getLayoutInflater(</span><br><span class="line">                                f.mSavedFragmentState), <span class="keyword">null</span>, f.mSavedFragmentState);</span><br><span class="line">                        <span class="keyword">if</span> (f.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            f.mInnerView = f.mView;</span><br><span class="line">                            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">11</span>) &#123;</span><br><span class="line">                                ViewCompat.setSaveFromParentEnabled(f.mView, <span class="keyword">false</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.mView = NoSaveStateFrameLayout.wrap(f.mView);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (f.mHidden) f.mView.setVisibility(View.GONE);</span><br><span class="line">                            f.onViewCreated(f.mView, f.mSavedFragmentState);</span><br><span class="line">                            dispatchOnFragmentViewCreated(f, f.mView, f.mSavedFragmentState, <span class="keyword">false</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            f.mInnerView = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> Fragment.CREATED:</span><br><span class="line">                    <span class="keyword">if</span> (newState &gt; Fragment.CREATED) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"moveto ACTIVITY_CREATED: "</span> + f);</span><br><span class="line">                        <span class="keyword">if</span> (!f.mFromLayout) &#123;</span><br><span class="line">                            ViewGroup container = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">if</span> (f.mContainerId != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (f.mContainerId == View.NO_ID) &#123;</span><br><span class="line">                                    throwException(<span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                            <span class="string">"Cannot create fragment "</span></span><br><span class="line">                                                    + f</span><br><span class="line">                                                    + <span class="string">" for a container view with no id"</span>));</span><br><span class="line">                                &#125;</span><br><span class="line">                                container = (ViewGroup) mContainer.onFindViewById(f.mContainerId);</span><br><span class="line">                                <span class="keyword">if</span> (container == <span class="keyword">null</span> &amp;&amp; !f.mRestored) &#123;</span><br><span class="line">                                    String resName;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        resName = f.getResources().getResourceName(f.mContainerId);</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">                                        resName = <span class="string">"unknown"</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    throwException(<span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                            <span class="string">"No view found for id 0x"</span></span><br><span class="line">                                            + Integer.toHexString(f.mContainerId) + <span class="string">" ("</span></span><br><span class="line">                                            + resName</span><br><span class="line">                                            + <span class="string">") for fragment "</span> + f));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            f.mContainer = container;</span><br><span class="line">                            f.mView = f.performCreateView(f.getLayoutInflater(</span><br><span class="line">                                    f.mSavedFragmentState), container, f.mSavedFragmentState);</span><br><span class="line">                            <span class="keyword">if</span> (f.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                f.mInnerView = f.mView;</span><br><span class="line">                                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">11</span>) &#123;</span><br><span class="line">                                    ViewCompat.setSaveFromParentEnabled(f.mView, <span class="keyword">false</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    f.mView = NoSaveStateFrameLayout.wrap(f.mView);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (container != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    container.addView(f.mView);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (f.mHidden) &#123;</span><br><span class="line">                                    f.mView.setVisibility(View.GONE);</span><br><span class="line">                                &#125;</span><br><span class="line">                                f.onViewCreated(f.mView, f.mSavedFragmentState);</span><br><span class="line">                                dispatchOnFragmentViewCreated(f, f.mView, f.mSavedFragmentState,</span><br><span class="line">                                        <span class="keyword">false</span>);</span><br><span class="line">                                <span class="comment">// Only animate the view if it is visible. This is done after</span></span><br><span class="line">                                <span class="comment">// dispatchOnFragmentViewCreated in case visibility is changed</span></span><br><span class="line">                                f.mIsNewlyAdded = (f.mView.getVisibility() == View.VISIBLE)</span><br><span class="line">                                        &amp;&amp; f.mContainer != <span class="keyword">null</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.mInnerView = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        f.performActivityCreated(f.mSavedFragmentState);</span><br><span class="line">                        dispatchOnFragmentActivityCreated(f, f.mSavedFragmentState, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">if</span> (f.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            f.restoreViewState(f.mSavedFragmentState);</span><br><span class="line">                        &#125;</span><br><span class="line">                        f.mSavedFragmentState = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> Fragment.ACTIVITY_CREATED:</span><br><span class="line">                    <span class="keyword">if</span> (newState &gt; Fragment.ACTIVITY_CREATED) &#123;</span><br><span class="line">                        f.mState = Fragment.STOPPED;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> Fragment.STOPPED:</span><br><span class="line">                    <span class="keyword">if</span> (newState &gt; Fragment.STOPPED) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"moveto STARTED: "</span> + f);</span><br><span class="line">                        f.performStart();</span><br><span class="line">                        dispatchOnFragmentStarted(f, <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> Fragment.STARTED:</span><br><span class="line">                    <span class="keyword">if</span> (newState &gt; Fragment.STARTED) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"moveto RESUMED: "</span> + f);</span><br><span class="line">                        f.performResume();</span><br><span class="line">                        dispatchOnFragmentResumed(f, <span class="keyword">false</span>);</span><br><span class="line">                        f.mSavedFragmentState = <span class="keyword">null</span>;</span><br><span class="line">                        f.mSavedViewState = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">           ...</span><br><span class="line">      </span><br><span class="line">      ...</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mChildFragmentManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    &#125;</span><br><span class="line">    mState = CREATED;</span><br><span class="line">    mCalled = <span class="keyword">false</span>;</span><br><span class="line">    onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(<span class="string">"Fragment "</span> + <span class="keyword">this</span></span><br><span class="line">                + <span class="string">" did not call through to super.onCreate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">View <span class="title">performCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">        Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mChildFragmentManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onCreateView(inflater, container, savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mChildFragmentManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    &#125;</span><br><span class="line">    mState = ACTIVITY_CREATED;</span><br><span class="line">    mCalled = <span class="keyword">false</span>;</span><br><span class="line">    onActivityCreated(savedInstanceState);</span><br><span class="line">    <span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(<span class="string">"Fragment "</span> + <span class="keyword">this</span></span><br><span class="line">                + <span class="string">" did not call through to super.onActivityCreated()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mChildFragmentManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mChildFragmentManager.dispatchActivityCreated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出Fragment的部分生命周期回调：</p><ol><li><code>onAttach(mHost.getContext())</code> </li><li><code>performCreate(f.mSavedFragmentState)</code>  <code>performCreate</code>内部则回调了<code>onCreate</code></li><li><strong>f.performCreateView(f.getLayoutInflater(f.mSavedFragmentState), null, f.mSavedFragmentState)</strong> 这个是重点，DialogFragment会重写<strong>getLayoutInflater -&gt; performGetLayoutInflater -&gt; onGetLayoutInflater</strong> 调用顺序调用到的<code>onGetLayoutInflater</code>方法创建Dialog对象（<code>onCreateDialog</code>），并将<code>performCreateView</code>返回的view保存到Fragmnet内。即<code>onViewCreated</code>的第一个入参。<code>performCreateView</code>内会回调<code>onCreateView</code></li><li><code>onViewCreated(f.mView, f.mSavedFragmentState)</code></li><li><code>performActivityCreated(f.mSavedFragmentState)</code>   <code>performActivityCreated</code>内部会回调 <code>onActivityCreated</code></li></ol><p>DialogFragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">onGetLayoutInflater</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mShowsDialog) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onGetLayoutInflater(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mDialog = onCreateDialog(savedInstanceState);</span><br><span class="line">    <span class="keyword">switch</span> (mStyle) &#123;</span><br><span class="line">        <span class="keyword">case</span> STYLE_NO_INPUT:</span><br><span class="line">            mDialog.getWindow().addFlags(</span><br><span class="line">                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |</span><br><span class="line">                    WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);</span><br><span class="line">            <span class="comment">// fall through...</span></span><br><span class="line">        <span class="keyword">case</span> STYLE_NO_FRAME:</span><br><span class="line">        <span class="keyword">case</span> STYLE_NO_TITLE:</span><br><span class="line">            mDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDialog != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (LayoutInflater)mDialog.getContext().getSystemService(</span><br><span class="line">                Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (LayoutInflater) mHost.getContext().getSystemService(</span><br><span class="line">            Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Override to build your own custom Dialog container.  This is typically</span></span><br><span class="line"><span class="comment"> * used to show an AlertDialog instead of a generic Dialog; when doing so,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #onCreateView(LayoutInflater, ViewGroup, Bundle)&#125; does not need</span></span><br><span class="line"><span class="comment"> * to be implemented since the AlertDialog takes care of its own content.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method will be called after &#123;<span class="doctag">@link</span> #onCreate(Bundle)&#125; and</span></span><br><span class="line"><span class="comment"> * before &#123;<span class="doctag">@link</span> #onCreateView(LayoutInflater, ViewGroup, Bundle)&#125;.  The</span></span><br><span class="line"><span class="comment"> * default implementation simply instantiates and returns a &#123;<span class="doctag">@link</span> Dialog&#125;</span></span><br><span class="line"><span class="comment"> * class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;em&gt;Note: DialogFragment own the &#123;<span class="doctag">@link</span> Dialog#setOnCancelListener</span></span><br><span class="line"><span class="comment"> * Dialog.setOnCancelListener&#125; and &#123;<span class="doctag">@link</span> Dialog#setOnDismissListener</span></span><br><span class="line"><span class="comment"> * Dialog.setOnDismissListener&#125; callbacks.  You must not set them yourself.&lt;/em&gt;</span></span><br><span class="line"><span class="comment"> * To find out about these events, override &#123;<span class="doctag">@link</span> #onCancel(DialogInterface)&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@link</span> #onDismiss(DialogInterface)&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> savedInstanceState The last saved instance state of the Fragment,</span></span><br><span class="line"><span class="comment"> * or null if this is a freshly created Fragment.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Return a new Dialog instance to be displayed by the Fragment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Dialog(getActivity(), getTheme());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mShowsDialog) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View view = getView();</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (view.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"DialogFragment can not be attached to a container view"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mDialog.setContentView(view);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Activity activity = getActivity();</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mDialog.setOwnerActivity(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    mDialog.setCancelable(mCancelable);</span><br><span class="line">    <span class="keyword">if</span> (!mDialog.takeCancelAndDismissListeners(<span class="string">"DialogFragment"</span>, <span class="keyword">this</span>, <span class="keyword">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"You can not set Dialog's OnCancelListener or OnDismissListener"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);</span><br><span class="line">        <span class="keyword">if</span> (dialogState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDialog.onRestoreInstanceState(dialogState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据Fragment内主要生命周期方法调用顺序和DialogFragment重写的具体方法，可以确定一个调用顺序：（<strong>注：括号表示的是括号内的为括号前表示方法内部调用，不是表示入参</strong>）</p><p><strong>onAttach  -&gt;  onCreate  -&gt;  performCreateView( onGetLayoutInflater（onCreateDialog）  -&gt;  onCreateView)   -&gt; onViewCreated  -&gt;  onActivityCreated  -&gt;  onStart</strong></p><p>而且DialogFragment显示对话框主要还是通过内部创建Dialog对象来实现。</p><p>从Dialog的 <code>dispatchTouchEvent</code>入手：</p><p>Dialog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called to process touch screen events.  You can override this to</span></span><br><span class="line"><span class="comment"> * intercept all touch screen events before they are dispatched to the</span></span><br><span class="line"><span class="comment"> * window.  Be sure to call this implementation for touch screen events</span></span><br><span class="line"><span class="comment"> * that should be handled normally.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ev The touch screen event.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(@NonNull MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWindow.superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called when a touch screen event was not handled by any of the views</span></span><br><span class="line"><span class="comment"> * under it. This is most useful to process touch events that happen outside</span></span><br><span class="line"><span class="comment"> * of your window bounds, where there is no view to receive it.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event The touch screen event being processed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Return true if you have consumed the event, false if you haven't.</span></span><br><span class="line"><span class="comment"> *         The default implementation will cancel the dialog when a touch</span></span><br><span class="line"><span class="comment"> *         happens outside of the window bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCancelable &amp;&amp; mShowing &amp;&amp; mWindow.shouldCloseOnTouch(mContext, event)) &#123;</span><br><span class="line">        cancel();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>mWindow</code>在Android中的具体实现类为PhoneWindow，关于事件分发的详细说明可查看文章 <a href="/2679806526">Android事件分发机制源码解析</a>。由于我们点击的是外部区域，所以<code>superDispatchTouchEvent</code>不会消费此事件，从而转交给<code>onTouchEvent</code>处理。</p><p>onTouchEvent内主要看<code>mWindow.shouldCloseOnTouch(mContext, event)</code>，由于<code>PhoneWindow</code>没有重写该方法，所以看<code>Window</code>内的具体实现</p><p><a href="https://sourcegraph.com/github.com/aosp-mirror/platform_frameworks_base@318448fd7553a5951b541fdfdfeb28e9fc6fa9a0/-/blob/core/java/android/view/Window.java?utm_source=share#L1321:21" target="_blank" rel="noopener">Window.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">  <span class="meta">@UnsupportedAppUsage</span>(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = <span class="number">115609023</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldCloseOnTouch</span><span class="params">(Context context, MotionEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> isOutside =</span><br><span class="line">              event.getAction() == MotionEvent.ACTION_UP &amp;&amp; isOutOfBounds(context, event)</span><br><span class="line">              || event.getAction() == MotionEvent.ACTION_OUTSIDE;</span><br><span class="line">      <span class="keyword">if</span> (mCloseOnTouchOutside &amp;&amp; peekDecorView() != <span class="keyword">null</span> &amp;&amp; isOutside) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOutOfBounds</span><span class="params">(Context context, MotionEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> slop = ViewConfiguration.get(context).getScaledWindowTouchSlop();</span><br><span class="line">      <span class="keyword">final</span> View decorView = getDecorView();</span><br><span class="line">      <span class="keyword">return</span> (x &lt; -slop) || (y &lt; -slop)</span><br><span class="line">              || (x &gt; (decorView.getWidth()+slop))</span><br><span class="line">              || (y &gt; (decorView.getHeight()+slop));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Window#shouldCloseOnTouch主要是判断了点击位置是否在DecorView范围内。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>通过上述分析，可以通过重写<code>DialogFragment#onCreateDialog（Bundle）</code>方法，返回重写了<code>onTouchEvent</code>的Dialog对象OutsideClickDialog。通过<code>onTouchEvent</code>拦截事件。</p><p>OutsideClickDialog具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OutsideClickDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCancelable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnOutsideClickListener onOutsideClickListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanceledOnTouchOutside</span><span class="params">(<span class="keyword">boolean</span> cancel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setCanceledOnTouchOutside(cancel);</span><br><span class="line">        mCancelable = cancel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnOutsideClickListener</span><span class="params">(OnOutsideClickListener onOutsideClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onOutsideClickListener = onOutsideClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutsideClickDialog</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutsideClickDialog</span><span class="params">(@NonNull Context context, <span class="keyword">int</span> themeResId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, themeResId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">OutsideClickDialog</span><span class="params">(@NonNull Context context, <span class="keyword">boolean</span> cancelable, @Nullable OnCancelListener cancelListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, cancelable, cancelListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCancelable &amp;&amp; isShowing() &amp;&amp;</span><br><span class="line">                (event.getAction() == MotionEvent.ACTION_UP &amp;&amp; isOutOfBounds(getContext(), event) ||</span><br><span class="line">                        event.getAction() == MotionEvent.ACTION_OUTSIDE)) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> consume = onOutsideClickListener.consumeOutsideClick();</span><br><span class="line">            <span class="keyword">if</span> (consume) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOutOfBounds</span><span class="params">(Context context, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> slop = ViewConfiguration.get(context).getScaledWindowTouchSlop();</span><br><span class="line">        <span class="keyword">final</span> View decorView = getWindow().getDecorView();</span><br><span class="line">        <span class="keyword">return</span> (x &lt; -slop) || (y &lt; -slop)</span><br><span class="line">                || (x &gt; (decorView.getWidth() + slop))</span><br><span class="line">                || (y &gt; (decorView.getHeight() + slop));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在DialogFragment子类SimpleDialogFragment内：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//自定义Dialog，通过重写onTouchEvent拦截外部点击事件</span></span><br><span class="line">       OutsideClickDialog outsideClickDialog = <span class="keyword">new</span> OutsideClickDialog(getContext(), getTheme());</span><br><span class="line">       outsideClickDialog.setOnOutsideClickListener(<span class="keyword">this</span>::consumeOutsideClick);</span><br><span class="line">       <span class="comment">//对返回按键做监听</span></span><br><span class="line">       outsideClickDialog.setOnKeyListener((dialog1, keyCode, event) -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">               <span class="keyword">if</span> (mBuilder.onOutsideClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">//根据回调方法判断是否拦截</span></span><br><span class="line">                   <span class="keyword">return</span> mBuilder.onOutsideClickListener.consumeOutsideClick();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> outsideClickDialog;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">consumeOutsideClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mBuilder.onOutsideClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//根据回调方法判断是否拦截外部点击事件</span></span><br><span class="line">           <span class="keyword">return</span> mBuilder.onOutsideClickListener.consumeOutsideClick();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> !mBuilder.cancelable;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> cancelable = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">private</span> OnOutsideClickListener onOutsideClickListener;</span><br><span class="line">       <span class="keyword">private</span> DialogInterface.OnDismissListener onDismissListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Builder <span class="title">setCancelable</span><span class="params">(<span class="keyword">boolean</span> cancelable)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.cancelable = cancelable;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Builder <span class="title">setOutsideClickListener</span><span class="params">(OnOutsideClickListener onOutsideClickListener)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.onOutsideClickListener = onOutsideClickListener;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> Builder <span class="title">setOnDismissListener</span><span class="params">(DialogInterface.OnDismissListener onDismissListener)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.onDismissListener = onDismissListener;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> SimpleDialogFragment <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> SimpleDialogFragment.getInstance(<span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> SimpleDialogFragment <span class="title">show</span><span class="params">(FragmentManager manager, String tag)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (manager.findFragmentByTag(tag) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> (SimpleDialogFragment) manager.findFragmentByTag(tag);</span><br><span class="line">           &#125;</span><br><span class="line">           SimpleDialogFragment dialog = create();</span><br><span class="line">           dialog.show(manager, tag);</span><br><span class="line">           <span class="keyword">return</span> dialog;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中Builder 为SimpleDialogFragment静态内部类。</p><p>并通过OnKeyListener监听返回按键。</p><p>具体使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.bindEvent();</span><br><span class="line">    btnShowDialog.setOnClickListener(<span class="keyword">this</span>::showDialog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialog</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SimpleDialogFragment.Builder()</span><br><span class="line">            .setOutsideClickListener(() -&gt; &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"showDialog outer click "</span>);</span><br><span class="line">                Toast.makeText(activityInstance, <span class="string">"outer click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setOnDismissListener(dialog -&gt; &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"showDialog dismiss"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">    .show(getSupportFragmentManager(), <span class="string">"simple_dialog_test"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://gitee.com/goldsea/learn/tree/master/app/src/main/java/com/nhtzj/learnapplication/activity/sample/dialog" target="_blank" rel="noopener">完整代码在该目录下</a></p><p><a href="https://gitee.com/goldsea/learn/tree/master/app/src/main/java/com/nhtzj/learnapplication/activity/sample/dialog" target="_blank" rel="noopener">https://gitee.com/goldsea/learn/tree/master/app/src/main/java/com/nhtzj/learnapplication/activity/sample/dialog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;h3 id=&quot;国内疫情&quot;&gt;&lt;a href=&quot;#国内疫情&quot; class=&quot;headerlink&quot; title=&quot;国内疫情&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="系统组件" scheme="http://www.nhtzj.com/categories/android/%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="DialogFragment" scheme="http://www.nhtzj.com/tags/DialogFragment/"/>
    
      <category term="外部点击监听" scheme="http://www.nhtzj.com/tags/%E5%A4%96%E9%83%A8%E7%82%B9%E5%87%BB%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>ConstraintLayout 填坑记</title>
    <link href="http://www.nhtzj.com/280127131/"/>
    <id>http://www.nhtzj.com/280127131/</id>
    <published>2020-06-04T15:07:26.000Z</published>
    <updated>2020-06-26T09:38:10.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><h3 id="国内疫情"><a href="#国内疫情" class="headerlink" title="国内疫情"></a>国内疫情</h3><p>6月4日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例5例，均为境外输入病例（上海4例，四川1例）；无新增死亡病例；无新增疑似病例。</p><h3 id="国际疫情"><a href="#国际疫情" class="headerlink" title="国际疫情"></a>国际疫情</h3><p>截至6月4日，国际上214个国家/地区、日本领海邮轮上和其他商船(不含港澳台地区)累计确诊6332225例新型冠状病毒肺炎病例，累计死亡378222例；6月4日新增129280例确诊病例，新增4842例死亡病例。无新增报告病例的国家和地区。（来源：世界卫生组织）</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇记录小编在使用ConstrintLayout组件开发过程中遇到的“坑”。</p><h2 id="ViewStub高度异常"><a href="#ViewStub高度异常" class="headerlink" title="ViewStub高度异常"></a>ViewStub高度异常</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><code>ViewStub</code>位于多个子控件之间，宽度设置为 <code>0dp</code>，高度设置为 <code>44dp</code>，start和end都为 <code>parent</code>，即宽为铺满父容器 <code>ConstraintLayout</code>；而Y轴则指定为其他两个子控件之间，即指定了 <code>layout_constraintTop_toBottomof</code> 和<code>layout_constraintBottom_toTopf</code>。</p><p>但实际运行调用<code>ViewStub.inflate</code>后的结果是<code>ViewStub</code>会占满自<code>ViewStub</code>开始的所有空间，即<code>ViewStub</code>下方的控件都不会显示。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><code>ViewStub</code>中有这样一个属性：inflatedId，官方文档中的解释如下：</p><blockquote><p>android:inflatedId—Overrides the id of the inflated View with this value</p></blockquote><p>即实际加载的view的ID将会设置为<code>inflatedId</code>所代表的值。</p><p>将该属性的值，与ViewStub的<code>android:id</code>的值设置的完全一样，即可解决问题。</p><p>通过Android Studio自带的Layout Inspector工具查看<code>ViewStub</code>所在的界面，可以发现<code>ViewStub.inflate</code>后不会再有<code>ViewStub</code>标签，只有<code>android:layout</code>所指向的布局内容，所以使用在<code>ViewStub</code>上的约束必须通过相同的ID获取到。</p><h2 id="ConstraintSet相关"><a href="#ConstraintSet相关" class="headerlink" title="ConstraintSet相关"></a>ConstraintSet相关</h2><p>其中对于<code>ConstraintLayout.LayoutParams</code>有一段特别的说明：</p><p><strong> This class contains the different attributes specifying how a view want to be laid out inside a <code>ConstraintLayout</code>. For building up constraints at run time, using <code>ConstraintSet</code> is recommended.</strong></p><p>翻译过来即：该类包含的属性具体说明了子控件在<code>ConstraintLayout</code>内的布局位置。ConstraintLayout不推荐在运行时用LayoutParams来设置属性，而是用ConstraintSet来设置参数。</p><h3 id="applyTo"><a href="#applyTo" class="headerlink" title="applyTo"></a>applyTo</h3><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h4><p><code>ConstraintLayout</code>的子控件通过<code>View.setVisibility(@Visibility int visibility)</code>修改过可见性后，调用<code>ConstraintSet.applyTo(ConstraintLayout constraintLayout)</code> 后，子控件的可见性会恢复成初始状态。</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>调用<code>View.setVisibility(@Visibility int visibility)</code>后再添加ConstraintSet的更新：<code>ConstraintSet.setVisibility(int viewId, int visibility)</code> 其中viewId：调用<code>View.setVisibility（）</code>的id。</p><p>示例代码：<a href="https://gitee.com/goldsea/learn/blob/97399154552a7467ed9c05ef917435d3fac3428d/app/src/main/java/com/nhtzj/learnapplication/activity/sample/constraint/ConstraintActivity.java" target="_blank" rel="noopener">ConstraintActivity.java</a>    </p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Apply the constraints to a ConstraintLayout.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> constraintLayout to be modified</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyTo</span><span class="params">(ConstraintLayout constraintLayout)</span> </span>&#123;</span><br><span class="line">       applyToInternal(constraintLayout);</span><br><span class="line">       constraintLayout.setConstraintSet(<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Used to set constraints when used by constraint layout</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">applyToInternal</span><span class="params">(ConstraintLayout constraintLayout)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> count = constraintLayout.getChildCount();</span><br><span class="line">       HashSet&lt;Integer&gt; used = <span class="keyword">new</span> HashSet&lt;Integer&gt;(mConstraints.keySet());</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">           View view = constraintLayout.getChildAt(i);</span><br><span class="line">           <span class="keyword">int</span> id = view.getId();</span><br><span class="line">           <span class="keyword">if</span> (mConstraints.containsKey(id)) &#123;</span><br><span class="line">               used.remove(id);</span><br><span class="line">               Constraint constraint = mConstraints.get(id);</span><br><span class="line">               <span class="keyword">if</span> (constraint.mHelperType != UNSET) &#123;</span><br><span class="line">                   <span class="keyword">switch</span> (constraint.mHelperType) &#123;</span><br><span class="line">                       <span class="keyword">case</span> BARRIER_TYPE:</span><br><span class="line">                           Barrier barrier = (Barrier) view;</span><br><span class="line">                           barrier.setId(id);</span><br><span class="line">                           barrier.setReferencedIds(constraint.mReferenceIds);</span><br><span class="line">                           barrier.setType(constraint.mBarrierDirection);</span><br><span class="line">                           ConstraintLayout.LayoutParams param = constraintLayout</span><br><span class="line">                               .generateDefaultLayoutParams();</span><br><span class="line">                           constraint.applyTo(param);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               ConstraintLayout.LayoutParams param = (ConstraintLayout.LayoutParams) view</span><br><span class="line">                   .getLayoutParams();</span><br><span class="line">               constraint.applyTo(param);</span><br><span class="line">               view.setLayoutParams(param);</span><br><span class="line">             <span class="comment">//此处会调用setVisibility刷新控件可见性</span></span><br><span class="line">               view.setVisibility(constraint.visibility);</span><br><span class="line">               <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">                   view.setAlpha(constraint.alpha);</span><br><span class="line">                   view.setRotation(constraint.rotation);</span><br><span class="line">                   view.setRotationX(constraint.rotationX);</span><br><span class="line">                   view.setRotationY(constraint.rotationY);</span><br><span class="line">                   view.setScaleX(constraint.scaleX);</span><br><span class="line">                   view.setScaleY(constraint.scaleY);</span><br><span class="line">                   view.setPivotX(constraint.transformPivotX);</span><br><span class="line">                   view.setPivotY(constraint.transformPivotY);</span><br><span class="line">                   view.setTranslationX(constraint.translationX);</span><br><span class="line">                   view.setTranslationY(constraint.translationY);</span><br><span class="line">                   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">                       view.setTranslationZ(constraint.translationZ);</span><br><span class="line">                       <span class="keyword">if</span> (constraint.applyElevation) &#123;</span><br><span class="line">                           view.setElevation(constraint.elevation);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (Integer id : used) &#123;</span><br><span class="line">           Constraint constraint = mConstraints.get(id);</span><br><span class="line">           <span class="keyword">if</span> (constraint.mHelperType != UNSET) &#123;</span><br><span class="line">               <span class="keyword">switch</span> (constraint.mHelperType) &#123;</span><br><span class="line">                   <span class="keyword">case</span> BARRIER_TYPE:</span><br><span class="line">                       Barrier barrier = <span class="keyword">new</span> Barrier(constraintLayout.getContext());</span><br><span class="line">                       barrier.setId(id);</span><br><span class="line">                       barrier.setReferencedIds(constraint.mReferenceIds);</span><br><span class="line">                       barrier.setType(constraint.mBarrierDirection);</span><br><span class="line">                       ConstraintLayout.LayoutParams param = constraintLayout</span><br><span class="line">                           .generateDefaultLayoutParams();</span><br><span class="line">                       constraint.applyTo(param);</span><br><span class="line">                       constraintLayout.addView(barrier, param);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (constraint.mIsGuideline) &#123;</span><br><span class="line">               Guideline g = <span class="keyword">new</span> Guideline(constraintLayout.getContext());</span><br><span class="line">               g.setId(id);</span><br><span class="line">               ConstraintLayout.LayoutParams param = constraintLayout.generateDefaultLayoutParams();</span><br><span class="line">               constraint.applyTo(param);</span><br><span class="line">               constraintLayout.addView(g, param);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过上面源码可知：applyTo内部调用了applyToInternal方法，内部又调用了<strong>view.setVisibility(constraint.visibility);</strong>使用ConstraintSet内保存的值进行刷新。</p><p>ConstraintSet主要是对子控件的位置进行控制调整，包括：visibility、alpha、rotation、rotationX、rotationY、scaleX、scaleY、transformPivotX、transformPivotY、translationX、translationY、elevation。</p><p>所以不是通过<code>ConstraintSet</code>更新的这些属性值，在调用<code>applyTo</code>后都不会生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;h3 id=&quot;国内疫情&quot;&gt;&lt;a href=&quot;#国内疫情&quot; class=&quot;headerlink&quot; title=&quot;国内疫情&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="系统组件" scheme="http://www.nhtzj.com/categories/android/%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="系统组件" scheme="http://www.nhtzj.com/tags/%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/"/>
    
      <category term="ConstraintLayout" scheme="http://www.nhtzj.com/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>常用却不简单的TextView</title>
    <link href="http://www.nhtzj.com/2490979448/"/>
    <id>http://www.nhtzj.com/2490979448/</id>
    <published>2020-05-27T15:11:40.000Z</published>
    <updated>2020-05-27T17:43:22.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><h3 id="国内疫情"><a href="#国内疫情" class="headerlink" title="国内疫情"></a>国内疫情</h3><p>5月26日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例1例，为境外输入病例（在上海）；无新增死亡病例；新增疑似病例1例，为境外输入病例（在福建）</p><h3 id="国际疫情"><a href="#国际疫情" class="headerlink" title="国际疫情"></a>国际疫情</h3><p>截至2020年5月27日12时，全球共215个国家和地区爆发了新冠疫情。除中国外，其他国家新冠病毒感染病例累计确诊555.3万人，累计治愈223.9万人，累计死亡35.0万人。其中，美国累计确诊168.0万人，累计死亡9.9万人。巴西、俄罗斯、英国、西班牙和意大利累计确诊均超20万人。英国、意大利、法国、西班牙和巴西累计死亡均超2万人。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android开发中TextView是使用频率最高的一个控件，除了能显示文本内容还能展示图片。本篇就记录日常开发中关于TextView的一些特殊或者较少使用却有大用的属性或能力。关于使用TextView显示富文本的相关内容可以转到之前写的文章<a href="/361989272">神奇的TextView-实现富文本</a>，实现了文本、图片加载显示及链接处理。</p><h2 id="设置行间距、行高"><a href="#设置行间距、行高" class="headerlink" title="设置行间距、行高"></a>设置行间距、行高</h2><h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><p><img src="/images/2020/05/textview-line-height-result.png" alt="textview-line-height"></p><h3 id="android-lineHeight-setLineHeight-int"><a href="#android-lineHeight-setLineHeight-int" class="headerlink" title="android:lineHeight / setLineHeight(int)"></a>android:lineHeight / setLineHeight(int)</h3><p>设置行高，文本高度也包含在内。Added in <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">API level 28</a></p><p>官方文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Explicit height between lines of text. If set, <span class="keyword">this</span> will override the values set <span class="keyword">for</span> lineSpacingExtra and lineSpacingMultiplier.</span><br><span class="line"></span><br><span class="line">May be a dimension value, which is a floating point number appended with a unit such as <span class="string">"`14.5sp`"</span>. Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size), in (inches), <span class="function">and <span class="title">mm</span> <span class="params">(millimeters)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Related methods:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">- `<span class="title">setLineHeight</span><span class="params">(<span class="keyword">int</span>)</span>`</span></span><br></pre></td></tr></table></figure><p>翻译过来大致意思是：</p><p>指定文本明确的行间距，并且设置了该属性后<code>lineSpacingExtra</code> 和 <code>lineSpacingMultiplier</code>将会被覆盖，即失效。设置的值是一个尺寸值，单位可以是px、dp、sp、in、mm。</p><h3 id="android-lineSpacingExtra-setLineSpacing-float-float"><a href="#android-lineSpacingExtra-setLineSpacing-float-float" class="headerlink" title="android:lineSpacingExtra / setLineSpacing(float,float)"></a>android:lineSpacingExtra / setLineSpacing(float,float)</h3><p>设置行间距，文本高度不包含在内。Added in <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">API level 1</a></p><p>官方文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Extra spacing between lines of text. The value will not be applied <span class="keyword">for</span> the last line of text.</span><br><span class="line"></span><br><span class="line">May be a dimension value, which is a floating point number appended with a unit such as <span class="string">"`14.5sp`"</span>. Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size), in (inches), <span class="function">and <span class="title">mm</span> <span class="params">(millimeters)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">**Related methods:**</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">- `<span class="title">setLineSpacing</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>)</span>`</span></span><br></pre></td></tr></table></figure><p>翻译过来大致意思是：</p><p>指定文本行间距的额外距离（即设置的是不包含文本高度的距离），最后一行不会生效。设置的值是一个尺寸值，单位可以是px、dp、sp、in、mm。</p><p>其中Java方法 <code>setLineSpacing(float,float)</code> 为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLineSpacing</span> <span class="params">(<span class="keyword">float</span> add, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">float</span> mult)</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Parameters</th><th></th></tr></thead><tbody><tr><td style="text-align:left"><code>add</code></td><td><code>float</code>: The value in pixels that should be added to each line other than the last line. This will be applied after the multiplier</td></tr><tr><td style="text-align:left"><code>mult</code></td><td><code>float</code>: The value by which each line height other than the last line will be multiplied by</td></tr></tbody></table><p>第一个入参 <code>add</code> 等同于 xml 中 <code>lineSpacingExtra</code>设置的值，先乘mult值，后加add值；</p><p>第二个入参 mult 等同于 xml 中 lineSpacingMultiplier设置的值；</p><h3 id="android-lineSpacingMultiplier-setLineSpacing-float-float"><a href="#android-lineSpacingMultiplier-setLineSpacing-float-float" class="headerlink" title="android:lineSpacingMultiplier / setLineSpacing(float,float)"></a>android:lineSpacingMultiplier / setLineSpacing(float,float)</h3><p>设置行间距的倍数，文本高度不包含在内。Added in <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">API level 1</a></p><p>官方文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Extra spacing between lines of text, as a multiplier. The value will not be applied <span class="keyword">for</span> the last line of text.</span><br><span class="line"></span><br><span class="line">May be a floating point value, such as <span class="string">"`1.2`"</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Related methods:**</span><br><span class="line"></span><br><span class="line">- `setLineSpacing(<span class="keyword">float</span>,<span class="keyword">float</span>)`</span><br></pre></td></tr></table></figure><p>翻译过来大致意思是：</p><p>指定文本行间距的倍数（即设置的是不包含文本高度的距离倍数），最后一行不会生效。浮点类型。</p><h3 id="android-letterSpacing"><a href="#android-letterSpacing" class="headerlink" title="android:letterSpacing"></a>android:letterSpacing</h3><p>设置字符间距。Added in <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels" target="_blank" rel="noopener">API level 21</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Text letter-spacing.</span><br><span class="line"></span><br><span class="line">May be a floating point value, such as <span class="string">"`1.2`"</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Related methods:**</span><br><span class="line"></span><br><span class="line">- `setLetterSpacing(<span class="keyword">float</span>)`</span><br></pre></td></tr></table></figure><p>翻译过来大致意思是：</p><p>文本的字符距离。浮点类型。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://gitee.com/goldsea/learn/blob/master/app/src/main/res/layout/activity_text_view.xml" target="_blank" rel="noopener">activity_text_view.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".activity.sample.TextViewActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_default"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"大家好，我是默认的TextView显示样式。大家好，我是默认的TextView显示样式。大家好，我是默认的TextView显示样式。大家好，我是默认的TextView显示样式"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- android:lineHeight="30dp"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_line_height"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineHeight</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"大家好，我是设置了lineHeight=30dp的TextView显示样式，使用该属性后lineSpacingExtra和lineSpacingMultiplier都将无效。该属性需要SDK&gt;=28时才能使用"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_default"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- android:lineSpacingExtra="10dp"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_line_space_extra"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"大家好，我是设置了lineSpacingExtra=10dp的TextView显示样式。大家好，我是设置了lineSpacingExtra=10dp的TextView显示样式。"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_line_height"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- android:lineSpacingMultiplier="1.5"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_line_space_multiplier"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingMultiplier</span>=<span class="string">"1.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"大家好，我是设置了lineSpacingMultiplier=1.5的TextView显示样式。大家好，我是设置了lineSpacingMultiplier=1.5的TextView显示样式。"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_line_space_extra"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--android:letterSpacing="0.5"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_letter_space"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:letterSpacing</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"大家好，我是设置了letterSpacing=0.5的TextView显示样式。该属性需要SDK&gt;=21时才能使用"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_line_space_multiplier"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/goldsea/learn/blob/master/app/src/main/java/com/nhtzj/learnapplication/activity/sample/TextViewActivity.java" target="_blank" rel="noopener">TextViewActivity.java</a> </p><p>用于展示java内如何设置，效果同<code>activity_text_view.xml</code>内一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等同于 android:lineHeight="30dp"</span></span><br><span class="line">TextView tvLineHeight = findViewById(R.id.tv_line_height);</span><br><span class="line"><span class="keyword">int</span> lineHeight = SizeUtils.dp2px(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">    tvLineHeight.setLineHeight(lineHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于android:lineSpacingExtra="10dp"</span></span><br><span class="line">TextView tvLineSpacingExtra = findViewById(R.id.tv_line_spacing_extra);</span><br><span class="line"><span class="keyword">int</span> add = SizeUtils.dp2px(<span class="number">10</span>);</span><br><span class="line">tvLineSpacingExtra.setLineSpacing(add, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于 android:lineSpacingMultiplier="1.5"</span></span><br><span class="line">TextView tvLineSpacingMultiplier = findViewById(R.id.tv_line_spacing_multiplier);</span><br><span class="line">tvLineSpacingMultiplier.setLineSpacing(<span class="number">0</span>, <span class="number">1.5f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于   android:letterSpacing="0.5"</span></span><br><span class="line">TextView tvLetterSpace = findViewById(R.id.tv_letter_space);</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    tvLetterSpace.setLetterSpacing(<span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/reference/android/widget/TextView?hl=en#setLineHeight(int" target="_blank" rel="noopener">TextView官方文档</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;h3 id=&quot;国内疫情&quot;&gt;&lt;a href=&quot;#国内疫情&quot; class=&quot;headerlink&quot; title=&quot;国内疫情&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="view" scheme="http://www.nhtzj.com/categories/android/view/"/>
    
      <category term="TextView" scheme="http://www.nhtzj.com/categories/android/view/TextView/"/>
    
    
      <category term="android" scheme="http://www.nhtzj.com/tags/android/"/>
    
      <category term="TextView" scheme="http://www.nhtzj.com/tags/TextView/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Gradle无法同步（二）</title>
    <link href="http://www.nhtzj.com/3004092570/"/>
    <id>http://www.nhtzj.com/3004092570/</id>
    <published>2020-05-08T13:31:03.000Z</published>
    <updated>2020-05-08T14:53:26.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><h3 id="国内疫情概要"><a href="#国内疫情概要" class="headerlink" title="国内疫情概要"></a>国内疫情概要</h3><p>5月7日0—24时，31个省（自治区、直辖市）和新疆生产建设兵团报告新增确诊病例1例，为本土病例（在吉林）；无新增死亡病例；新增疑似病例3例，均为境外输入病例（在上海）。</p><h3 id="海外疫情概要"><a href="#海外疫情概要" class="headerlink" title="海外疫情概要"></a>海外疫情概要</h3><p>世界卫生组织：截至欧洲中部时间7日10时（北京时间7日16时），全球新冠确诊病例较前一日增加83465例，达到3672238例；死亡病例较前一日增加6539例，达到254045例。</p><p>美国约翰斯·霍普金斯大学：根据北京时间8日6时40分查询到的数据，全球确诊病例达3836215例，死亡病例为268999例。美国确诊病例升至1254740例，死亡病例达75543例。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几周，小编娇贵的Mac Pro频频无故断电，并且必须要连接外接电源才能开机，该问题最早发生在去年2019年冬天，但最近是越发的频繁了，故而预约了Apple 西湖 店自行送修。其实小编是去了两趟，由于第一次无法现场复现，所以就只是重装了系统，第二次去，才答应换电池套装。</p><p>换了电池之后，没有从Time Machine中做全盘恢复，只是恢复了部分资料，但几天后Android Studio 却无法同步Gradle文件。本篇就记录一下处理的这个艰辛过程，方便以后回述。</p><h2 id="报错详情"><a href="#报错详情" class="headerlink" title="报错详情"></a>报错详情</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project &apos;Test Application&apos;.</span><br><span class="line">&gt; Could not resolve all artifacts for configuration &apos;:classpath&apos;.</span><br><span class="line">   &gt; Could not download gradle.jar (com.android.tools.build:gradle:3.6.3)</span><br><span class="line">      &gt; Could not get resource &apos;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.6.3/gradle-3.6.3.jar&apos;.</span><br><span class="line">         &gt; Could not GET &apos;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.6.3/gradle-3.6.3.jar&apos;. Received status code 400 from server: Bad Request</span><br></pre></td></tr></table></figure><p>其中 <strong>400 Bad Request</strong> 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><h2 id="尝试处理（无效）"><a href="#尝试处理（无效）" class="headerlink" title="尝试处理（无效）"></a>尝试处理（无效）</h2><ul><li><p>手动下载 <a href="https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.6.3/gradle-3.6.3.jar" target="_blank" rel="noopener">gradle3.6.3</a> (浏览器内打开 <a href="https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.6.3/gradle-3.6.3.jar" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.6.3/gradle-3.6.3.jar</a>)，能正常下载。</p><p>其实从这可以推断出是代理的问题</p></li><li><p>关闭ClashX翻墙代理，关闭Android Studio内 Http proxy</p><p><img src="/images/2020/05/as-proxy-clashx-warm.png" alt="http proxy"></p></li><li><p>重装/降级 Android Studio</p><p>降级：当前AS上没有找到  <code>Enble embedded Maven repository</code>  选项。</p><p>Setting-&gt;Build,Execution,Deployment-&gt;Gradle-&gt;Android Studio ,然后把 <code>Enble embedded Maven repository</code> 前面的单选框勾选上。</p></li></ul><h2 id="解决方式（有效）"><a href="#解决方式（有效）" class="headerlink" title="解决方式（有效）"></a>解决方式（有效）</h2><p>在<code>/Users/(用户名)/.gradle/gradle.properties</code>文件内发现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">## For more details on how to configure your build environment visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/build_environment.html</span><br><span class="line">#</span><br><span class="line"># Specifies the JVM arguments used for the daemon process.</span><br><span class="line"># The setting is particularly useful for tweaking memory settings.</span><br><span class="line"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span><br><span class="line"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br><span class="line">#</span><br><span class="line"># When configured, Gradle will run in incubating parallel mode.</span><br><span class="line"># This option should only be used with decoupled projects. More details, visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span><br><span class="line"># org.gradle.parallel=true</span><br><span class="line">#Sun Mar 29 16:36:14 CST 2020</span><br><span class="line">systemProp.https.proxyPort=80</span><br><span class="line">systemProp.http.proxyHost=mirrors.neusoft.edu.cn</span><br><span class="line">systemProp.https.proxyHost=mirrors.neusoft.edu.cn</span><br><span class="line">systemProp.http.proxyPort=80</span><br></pre></td></tr></table></figure><p>最后4行指定了一个代理，原本以为是AS设置里面配了Http Proxy  <code>Auto-detect proxy setting</code>引起的。</p><p><img src="/images/2020/05/as-auto-detect-proxy-setting.png" alt="Auto-detect proxy setting"></p><p>之后尝试将最后4行的代理删了，结果就可以了。害得我辛辛苦苦折腾了大半天。</p><p>简单来讲就是<span class="label label-primary">删除 <code>gradle.properties</code>内的代理配置</span>。</p><blockquote><p>其实小编之前那篇 <a href="/2768760007/">Android Studio Gradle无法同步</a>也试通了一种方式，不过没有在这台机子上试试。不过 <a href="/2768760007/">Android Studio Gradle无法同步</a>中通过修改host文件添加索引的方式也不便利。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;h3 id=&quot;国内疫情概要&quot;&gt;&lt;a href=&quot;#国内疫情概要&quot; class=&quot;headerlink&quot; title=&quot;国内疫情概
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="tool" scheme="http://www.nhtzj.com/categories/android/tool/"/>
    
    
      <category term="Android Studio" scheme="http://www.nhtzj.com/tags/Android-Studio/"/>
    
      <category term="Gradle" scheme="http://www.nhtzj.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态切换全屏横屏</title>
    <link href="http://www.nhtzj.com/3052045100/"/>
    <id>http://www.nhtzj.com/3052045100/</id>
    <published>2020-04-26T15:03:02.000Z</published>
    <updated>2020-05-08T13:37:42.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h2><h3 id="国内疫情"><a href="#国内疫情" class="headerlink" title="国内疫情"></a>国内疫情</h3><p>截至4月25日24时，据31个省（自治区、直辖市）和新疆生产建设兵团报告，现有确诊病例801例（其中重症病例51例），累计治愈出院病例77394例，累计死亡病例4632例，累计报告确诊病例82827例，现有疑似病例12例。累计追踪到密切接触者729885人，尚在医学观察的密切接触者8308人。</p><h3 id="海外疫情"><a href="#海外疫情" class="headerlink" title="海外疫情"></a>海外疫情</h3><p>经济日报-中国经济网北京4月26日讯（记者 朱晓航）截至4月26日上午11点，全球新冠肺炎确诊病例逾291万例，中国以外确诊病例超283万例，共31国累计确诊病例过万，其中美国960651例，西班牙223759例，意大利195351例。</p><p>过去24小时，中国以外新冠肺炎病例新增超8.4万例，其中美国今日新增3.3万多（连续第33天新增过万），俄罗斯5900多，英国4900多，西班牙3900多。</p><p>目前全球共报告新冠肺死亡病例超20万例，中国以外死亡病例逾19.8万例，其中美国死亡54256例，意大利死亡26384例，西班牙死亡22902例。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几天的开发强度终于开始缓解下来了，小编才算是可以把之前later了好久的一个bug拿出来好好折腾折腾了。</p><p>本篇的主角bug全称：部分设备切换横屏后系统状态栏和导航栏无法隐藏，连续横竖屏切换多次后也会出现横屏全屏无法隐藏系统状态栏和导航栏。</p><p>本篇就将该问题的最终解决方案做个总结，接下来就直接进入主题。</p><h2 id="问题版本"><a href="#问题版本" class="headerlink" title="问题版本"></a>问题版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (ActivityInfo.SCREEN_ORIENTATION_USER == newConfig.orientation) &#123; <span class="comment">//横屏</span></span><br><span class="line">         hideSystemUI();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123; <span class="comment">//竖屏</span></span><br><span class="line">         showSystemUI();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 隐藏系统状态栏和导航栏</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideSystemUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     decorView.setSystemUiVisibility(</span><br><span class="line">             View.SYSTEM_UI_FLAG_IMMERSIVE</span><br><span class="line">                     <span class="comment">// Set the content to appear under the system bars so that the</span></span><br><span class="line">                     <span class="comment">// content doesn't resize when the system bars hide and show.</span></span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line">                     <span class="comment">// Hide the nav bar and status bar</span></span><br><span class="line">                     | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_FULLSCREEN);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 显示系统状态栏和导航栏</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showSystemUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     decorView.setSystemUiVisibility(</span><br><span class="line">             View.SYSTEM_UI_FLAG_VISIBLE);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="改进处理版本（BaseAppCompatActivity）"><a href="#改进处理版本（BaseAppCompatActivity）" class="headerlink" title="改进处理版本（BaseAppCompatActivity）"></a>改进处理版本（BaseAppCompatActivity）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 隐藏系统状态栏和导航栏</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Runnable hideSystemUIAction = <span class="keyword">this</span>::hideSystemUI;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onResume();</span><br><span class="line">     XLog.e(TAG, <span class="string">"onResume"</span>);</span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     <span class="comment">//注册监听器，以便让应用获得系统界面可见性更改的通知</span></span><br><span class="line">     decorView.setOnSystemUiVisibilityChangeListener(<span class="keyword">this</span>::onSystemUiVisibilityChange);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onPause();</span><br><span class="line">     XLog.e(TAG, <span class="string">"onPause"</span>);</span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     <span class="comment">//取消注册监听器</span></span><br><span class="line">     decorView.setOnSystemUiVisibilityChangeListener(<span class="keyword">null</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当前activity所属的Window得到/失去焦点时会回调该方法</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> hasFocus</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</span><br><span class="line">     <span class="keyword">boolean</span> orientationLandscape = isOrientationLandscape(getResources());</span><br><span class="line">     Log.w(TAG, String.format(<span class="string">"onWindowFocusChanged: %s isLandscape:%s"</span>, hasFocus, orientationLandscape));</span><br><span class="line">     <span class="keyword">if</span> (hasFocus &amp;&amp; orientationLandscape) &#123;</span><br><span class="line">         hideSystemUI();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> View.OnSystemUiVisibilityChangeListener&#125; 接口的回调操作，setOnSystemUiVisibilityChangeListener设置的哦</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> visibility</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSystemUiVisibilityChange</span><span class="params">(<span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// Note that system bars will only be "visible" if none of the</span></span><br><span class="line">     <span class="comment">// LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">boolean</span> orientationLandscape = isOrientationLandscape(getResources());</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == <span class="number">0</span>) &#123; <span class="comment">//系统状态栏显示</span></span><br><span class="line">         <span class="keyword">if</span> (orientationLandscape) &#123;</span><br><span class="line">             mHandler.removeCallbacks(hideSystemUIAction);</span><br><span class="line">             mHandler.postDelayed(hideSystemUIAction, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;<span class="comment">//系统状态栏隐藏</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 系统配置更新回调</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> newConfig</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (ActivityInfo.SCREEN_ORIENTATION_USER == newConfig.orientation) &#123; <span class="comment">//横屏</span></span><br><span class="line">         hideSystemUI();</span><br><span class="line">         mHandler.postDelayed(hideSystemUIAction, <span class="number">500</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123; <span class="comment">//竖屏</span></span><br><span class="line">         mHandler.removeCallbacks(hideSystemUIAction);</span><br><span class="line">         showSystemUI();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 隐藏系统状态栏和导航栏</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideSystemUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//使用SYSTEM_UI_FLAG_IMMERSIVE_STICKY模式，</span></span><br><span class="line">     <span class="comment">// 即：粘性沉浸模式，如果用户从隐藏了系统栏的边缘滑动，系统栏会显示出来，但它们是半透明的，</span></span><br><span class="line">     <span class="comment">// 并且轻触手势会传递给应用，因此应用也会响应该手势</span></span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     decorView.setSystemUiVisibility(</span><br><span class="line">             View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><br><span class="line">                     <span class="comment">// Set the content to appear under the system bars so that the</span></span><br><span class="line">                     <span class="comment">// content doesn't resize when the system bars hide and show.</span></span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="line">                     <span class="comment">// Hide the nav bar and status bar</span></span><br><span class="line">                     | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                     | View.SYSTEM_UI_FLAG_FULLSCREEN);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 显示系统状态栏和导航栏</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showSystemUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     View decorView = getWindow().getDecorView();</span><br><span class="line">     decorView.setSystemUiVisibility(</span><br><span class="line">             View.SYSTEM_UI_FLAG_VISIBLE);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断当前界面是否为横屏</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> resources</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isOrientationLandscape</span><span class="params">(Resources resources)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (resources == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Configuration.ORIENTATION_LANDSCAPE == resources.getConfiguration().orientation;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>改动点主要有以下几点：</p><ol><li><p>通过 <code>View.setOnSystemUiVisibilityChangeListener()</code>注册 <a href="https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener" target="_blank" rel="noopener">View.OnSystemUiVisibilityChangeListener</a> ，以便获得系统界面可见性更改的通知</p></li><li><p>实现 <code>onWindowFocusChanged()</code>。 如果在横屏下获得窗口焦点，则需要再次隐藏系统栏</p></li><li><p>隐藏操作通过Handler进行适当延迟</p></li><li><p>使用粘性沉浸模式（SYSTEM_UI_FLAG_IMMERSIVE_STICKY），在普通的沉浸模式中，只要用户从边缘滑动，系统就会负责显示系统栏，您的应用甚至不会知道发生了该手势。因此，如果用户实际上可能是出于主要的应用体验而需要从屏幕边缘滑动，例如在玩需要大量滑动的游戏或使用绘图应用时，您应改为启用“粘性”沉浸模式。</p><p>在粘性沉浸模式下，如果用户从隐藏了系统栏的边缘滑动，系统栏会显示出来，但它们是半透明的，并且轻触手势会传递给应用，因此应用也会响应该手势。</p></li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>源码仓库：<a href="https://gitee.com/goldsea/learn.git" target="_blank" rel="noopener">https://gitee.com/goldsea/learn.git</a></p><p>核心源码：<a href="https://gitee.com/goldsea/learn/blob/master/app/src/main/java/com/nhtzj/learnapplication/activity/sample/FullScreenActivity.java" target="_blank" rel="noopener">FullScreenActivity</a>、<a href="https://gitee.com/goldsea/learn/blob/master/app/src/main/java/com/nhtzj/learnapplication/activity/base/activity/BaseAppCompatActivity.java" target="_blank" rel="noopener">BaseAppCompatActivity</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/training/system-ui/immersive" target="_blank" rel="noopener">启用全屏模式</a></p><p><a href="https://developer.android.com/training/system-ui/visibility" target="_blank" rel="noopener">相应界面可见性更改</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h2&gt;&lt;h3 id=&quot;国内疫情&quot;&gt;&lt;a href=&quot;#国内疫情&quot; class=&quot;headerlink&quot; title=&quot;国内疫情&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="基础" scheme="http://www.nhtzj.com/categories/android/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="android" scheme="http://www.nhtzj.com/tags/android/"/>
    
      <category term="全屏" scheme="http://www.nhtzj.com/tags/%E5%85%A8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>自定义View之圆角实现</title>
    <link href="http://www.nhtzj.com/475838307/"/>
    <id>http://www.nhtzj.com/475838307/</id>
    <published>2020-02-12T11:28:57.000Z</published>
    <updated>2020-02-13T13:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h3><p>截至2月11日24时，据31个省(自治区、直辖市)和新疆生产建设兵团报告，现有确诊病例38800例(其中重症病例8204例)，累计治愈出院病例4740例，累计死亡病例1113例，累计报告确诊病例44653例，现有疑似病例16067例。累计追踪到密切接触者451462人，尚在医学观察的密切接触者185037人。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目中需要使用到圆角来展示内容。原先用得多的是用Canvas.clipXXX()或者是使用Paint.setXfermode()，现在用一个简单的方式就可实现，就是SDK21开始引入的ViewOutlineProvider类，用法也很简单。</p><h2 id="ViewOutlineProvider"><a href="#ViewOutlineProvider" class="headerlink" title="ViewOutlineProvider"></a>ViewOutlineProvider</h2><p><img src="/images/2020/02/ViewOutlineProvider.png" alt="ViewOutlineProvider"></p><blockquote><p> Interface by which a View builds its <code>Outline</code>, used for shadow casting and clipping.</p></blockquote><p>从上面官网的说明可以了解到ViewOutlineProvider有两个作用：裁剪、阴影。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>利用裁剪实现圆角方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ViewOutlineProvider outlineProvider = <span class="keyword">new</span> ViewOutlineProvider() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOutline</span><span class="params">(View view, Outline outline)</span> </span>&#123;</span><br><span class="line">             outline.setRoundRect(<span class="number">0</span>, <span class="number">0</span>, view.getWidth(), view.getHeight(), <span class="number">30</span>);</span><br><span class="line">           <span class="comment">//30为圆角半径，可自行修改</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     View view = findViewById(R.id.view);<span class="comment">//需要设置圆角的控件</span></span><br><span class="line">     view.setOutlineProvider(outlineProvider);<span class="comment">//将ViewOutlineProvider设置给view</span></span><br><span class="line">     view.setClipToOutline(<span class="keyword">true</span>);<span class="comment">//只有设置为true才能进行裁剪，false时不裁剪</span></span><br></pre></td></tr></table></figure><p>可以看到只要3步即可实现：</p><ol><li>创建ViewOutlineProvider，</li><li>实现<code>getOutline()</code>方法，使用Outline.setRoundRect()设置圆角矩阵，即裁剪后留下的有效区域</li><li>将ViewOutlineProvider设置给需要的View，并调用<code>View.setClipToOutline(true)</code>开启裁剪</li></ol><p>当然也可以调用<code>View.setClipToOutline(false)</code>关闭裁剪。</p><p>还有如下方法提供不同效果：</p><p>Outline.setOval()</p><p>Outline.setRect()</p><p>等……..</p><p>Outline类内部主要是有如下几个成员变量记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="meta">@Mode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> mMode = MODE_EMPTY;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Only guaranteed to be non-null when mode == MODE_CONVEX_PATH</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Path mPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Rect mRect = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> mRadius = RADIUS_UNDEFINED;</span><br><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> mAlpha;</span><br></pre></td></tr></table></figure><h3 id="利弊"><a href="#利弊" class="headerlink" title="利弊"></a>利弊</h3><p>利：使用方便</p><p>弊：必须要SDK&gt;=21才能使用</p><h2 id="SDK-lt-21解决方式"><a href="#SDK-lt-21解决方式" class="headerlink" title="SDK&lt;21解决方式"></a>SDK&lt;21解决方式</h2><p>SDK&lt;21的这里提供一种，可直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆角的RelativeLayout,如需要其他布局的圆角，可直接修改继承的父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRectLayout</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//圆角裁剪范围</span></span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line">    <span class="comment">//圆角半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRadius = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启圆角</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRoundMode = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundRectLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundRectLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mWidth = w;</span><br><span class="line">        mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">            setBackground(<span class="keyword">new</span> ColorDrawable(<span class="number">0x33ff0000</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(<span class="number">0x33ff0000</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line">        mPath.setFillType(Path.FillType.EVEN_ODD);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置是否圆角裁边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roundMode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoundMode</span><span class="params">(<span class="keyword">boolean</span> roundMode)</span> </span>&#123;</span><br><span class="line">        mRoundMode = roundMode;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置圆角半径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> radius</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCornerRadius</span><span class="params">(<span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">        mRadius = radius;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshRoundPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mPath.reset();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mRoundMode) &#123;</span><br><span class="line">            mPath.addRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight), mRadius, mRadius, Path.Direction.CW);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mRoundMode) &#123;</span><br><span class="line">            <span class="keyword">int</span> saveCount = canvas.save();</span><br><span class="line"></span><br><span class="line">            refreshRoundPath();</span><br><span class="line"></span><br><span class="line">            canvas.clipPath(mPath);</span><br><span class="line">            <span class="keyword">super</span>.draw(canvas);</span><br><span class="line"></span><br><span class="line">            canvas.restoreToCount(saveCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h3&gt;&lt;p&gt;截至2月11日24时，据31个省(自治区、直辖市)和新疆生产建设兵团报告，现有确诊病例38800例(其中重症病例8204例)
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="view" scheme="http://www.nhtzj.com/categories/android/view/"/>
    
      <category term="自定义" scheme="http://www.nhtzj.com/categories/android/view/%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="view" scheme="http://www.nhtzj.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Gradle无法同步</title>
    <link href="http://www.nhtzj.com/2768760007/"/>
    <id>http://www.nhtzj.com/2768760007/</id>
    <published>2020-02-10T11:35:15.000Z</published>
    <updated>2020-02-12T14:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="疫情概要"><a href="#疫情概要" class="headerlink" title="疫情概要"></a>疫情概要</h3><p>截至2月9日24时，据31个省（自治区、直辖市）和新疆生产建设兵团报告，现有确诊病例35982例（其中重症病例6484例），累计治愈出院病例3281例，累计死亡病例908例，累计报告确诊病例40171例（湖北核减87例，江西、甘肃各核减1例），现有疑似病例23589例。累计追踪到密切接触者399487人，尚在医学观察的密切接触者187518人。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于新型冠状病毒肺炎在全国快速蔓延，导致小编于2020/02/10正式开启在家办公模式。</p><p>申请完公司VPN后，能够成功访问到公司内网。但是无法正常同步获取到dl.google.com和maven.google.com下的文件。一开始还以为是国内高墙的原因，折腾了好一阵子，结果还是不行，最后发现是DNS异常，导致无法访问到。</p><p><img src="/images/2020/02/Android Studio Gradle could not get resource.PNG" alt="Gradle Sync Fail"></p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>DNS异常，域名无法正常访问，直接使用IP可以正常访问。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在hosts文件中手动添加索引，直接提供域名查询结果，从而绕开DNS。</p><p>以配置<code>dl.google.com</code>域名为例，操作步骤如下：</p><h4 id="1-获取有效的IP地址"><a href="#1-获取有效的IP地址" class="headerlink" title="1.获取有效的IP地址"></a>1.获取有效的IP地址</h4><p>通过 <a href="http://ip.tool.chinaz.com/" target="_blank" rel="noopener">IP查询</a>网站，获取<code>dl.google.com</code>域名的IP地址</p><p><img src="/images/2020/02/query_domain_ip.png" alt="获取IP地址"></p><h4 id="2-通过ping命令检测各IP地址的有效性和连接速度"><a href="#2-通过ping命令检测各IP地址的有效性和连接速度" class="headerlink" title="2.通过ping命令检测各IP地址的有效性和连接速度"></a>2.通过ping命令检测各IP地址的有效性和连接速度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ping -c 4 203.208.50.69</span><br><span class="line">PING 203.208.50.69 (203.208.50.69): 56 data bytes</span><br><span class="line">64 bytes from 203.208.50.69: icmp_seq=0 ttl=115 time=58.021 ms</span><br><span class="line">64 bytes from 203.208.50.69: icmp_seq=1 ttl=115 time=81.029 ms</span><br><span class="line">64 bytes from 203.208.50.69: icmp_seq=2 ttl=115 time=53.690 ms</span><br><span class="line">64 bytes from 203.208.50.69: icmp_seq=3 ttl=115 time=57.790 ms</span><br><span class="line"></span><br><span class="line">--- 203.208.50.69 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 packets received, 0.0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 53.690/62.633/81.029/10.760 ms</span><br></pre></td></tr></table></figure><blockquote><p><code>-c</code>命令指定ping次数，<code>-c 4</code> 表示ping4次。Mac 下<code>ping</code>命令不设置改参数会一直ping下去，除非用 <code>control + c</code>强制</p></blockquote><p>可以多测试几个IP地址，找到连接时长最短的，即访问速度最快的。</p><h4 id="3-在hosts文件中手动添加一条记录"><a href="#3-在hosts文件中手动添加一条记录" class="headerlink" title="3.在hosts文件中手动添加一条记录"></a>3.在hosts文件中手动添加一条记录</h4><p>Mac下的hosts文件在 <code>/etc/</code>下，操作如下：</p><ol><li>终端下输入命令 <code>sudo vim /etc/hosts</code>（不使用sudo命令，打开的文件处于只读状态，无法编辑）</li><li>输入登录密码（由于使用了sudo提升为root权限，需要输入密码）</li><li>点击键盘上字母 <code>I</code>进入编辑模式，在最后一行输入 <code>203.208.50.69    dl.google.com</code>(格式为<strong><code>IP地址    域名</code></strong>)</li><li>点击 <code>esc</code>键退出编辑模式</li><li>输入 <code>:wq</code>，按回车</li><li>操作完成</li></ol><h4 id="4-测试一下"><a href="#4-测试一下" class="headerlink" title="4. 测试一下"></a>4. 测试一下</h4><p>现在可以测试一下下面这个文件能否正常下载</p><p><a href="https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0/gradle-3.2.0.jar" target="_blank" rel="noopener">https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0/gradle-3.2.0.jar</a></p><p>关于 <code>maven.google.com</code>域名的设置同上面一致。</p><p><span class="label label-info">注意：由于本方式指定了IP地址，当设置的这个IP地址失效时会导致对应的域名无法访问。</span></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/8fb367a51b9f" target="_blank" rel="noopener">解决连不上dl.google.com的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;疫情概要&quot;&gt;&lt;a href=&quot;#疫情概要&quot; class=&quot;headerlink&quot; title=&quot;疫情概要&quot;&gt;&lt;/a&gt;疫情概要&lt;/h3&gt;&lt;p&gt;截至2月9日24时，据31个省（自治区、直辖市）和新疆生产建设兵团报告，现有确诊病例35982例（其中重症病例6484例），
      
    
    </summary>
    
      <category term="android" scheme="http://www.nhtzj.com/categories/android/"/>
    
      <category term="tool" scheme="http://www.nhtzj.com/categories/android/tool/"/>
    
    
      <category term="Android Studio" scheme="http://www.nhtzj.com/tags/Android-Studio/"/>
    
      <category term="Gradle" scheme="http://www.nhtzj.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>异常处理篇之MIUILOG-_Permission_Denied</title>
    <link href="http://www.nhtzj.com/3134546857/"/>
    <id>http://www.nhtzj.com/3134546857/</id>
    <published>2019-09-25T07:36:10.000Z</published>
    <updated>2019-10-15T15:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>I/ActivityManager: START u0 {act=android.intent.action.SEND cat=[android.intent.category.DEFAULT] typ=image/jpeg flg=0x1b080003 cmp=com.tencent.mm/.ui.tools.ShareImgUI clip={image/jpeg U:file:///storage/emulated/0/linkvisual/image/1569378148032.jpg} (has extras)} from uid 10331 on display 0<br>D/com.android.server.am.ExtraActivityManagerService: MIUILOG- Permission Denied Activity : Intent { act=android.intent.action.SEND cat=[android.intent.category.DEFAULT] typ=image/jpeg flg=0x1b080003 cmp=com.tencent.mm/.ui.tools.ShareImgUI clip={image/jpeg U:file:///storage/emulated/0/linkvisual/image/1569378148032.jpg} (has extras) } pkg : com.aliyun.iotx.iotx_lv_ipc_panel_android uid : 10331 tuid : 1000</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5d328ce3e51d454fbf540aad" target="_blank" rel="noopener">小米「后台弹出界面权限」最佳适配方案</a></p><p><a href="http://bbs.xiaomi.cn/t-38657091-2-o1#comment_top" target="_blank" rel="noopener">【开发者】关于默认关闭“后台弹出页面”权限的通知</a></p><p><a href="https://stackoverflow.com/questions/47020280/purchase-acquireactivity-intent-denied" target="_blank" rel="noopener">Purchase : AcquireActivity Intent denied</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I/ActivityManager: START u0 {act=android.intent.action.SEND cat=[android.intent.category.DEFAULT] typ=image/jpeg flg=0x1b080003 cmp=com.t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>异常处理篇之TransactionTooLargeException</title>
    <link href="http://www.nhtzj.com/321269709/"/>
    <id>http://www.nhtzj.com/321269709/</id>
    <published>2019-07-08T02:45:40.000Z</published>
    <updated>2019-09-25T07:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-os-TransactionTooLargeException"><a href="#android-os-TransactionTooLargeException" class="headerlink" title="android.os.TransactionTooLargeException"></a>android.os.TransactionTooLargeException</h2><p><strong>android.os.TransactionTooLargeException: data parcel size 725216 bytes</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android.os.TransactionTooLargeException: data parcel size 725216 bytes</span><br><span class="line">at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line">at android.os.BinderProxy.transact(Binder.java:506)</span><br><span class="line">at android.app.ApplicationThreadProxy.scheduleLaunchActivity(ApplicationThreadNative.java:852)</span><br><span class="line">at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:1385)</span><br><span class="line">at com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked(ActivityStackSupervisor.java:1490)</span><br><span class="line">at com.android.server.am.ActivityStack.resumeTopActivityInnerLocked(ActivityStack.java:2081)</span><br><span class="line">at com.android.server.am.ActivityStack.resumeTopActivityLocked(ActivityStack.java:1594)</span><br><span class="line">at com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked(ActivityStackSupervisor.java:2959)</span><br><span class="line">at com.android.server.am.ActivityStack.completePauseLocked(ActivityStack.java:1087)</span><br><span class="line">at com.android.server.am.ActivityStack.activityPausedLocked(ActivityStack.java:975)</span><br><span class="line">at com.android.server.am.ActivityManagerService.activityPaused(ActivityManagerService.java:6932)</span><br><span class="line">at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:542)</span><br><span class="line">at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2631)</span><br><span class="line">at android.os.Binder.execTransact(Binder.java:453)</span><br></pre></td></tr></table></figure><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>Intent内携带的数据过大</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p><strong>将传递的信息封装在一个静态的类中，或则封装在跳转对象的一个静态属性中，效率高，但是耦合性也高！</strong>（这种方法在<a href="https://stackoverflow.com/questions/11451393/what-to-do-on-transactiontoolargeexception" target="_blank" rel="noopener">stackoverflow</a>网站看到的，有兴趣可以点击查看详情）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">DataSave.setValue(value);<span class="comment">//将value设置到静态类DataSave中</span></span><br><span class="line"><span class="comment">//SecondActivity.value = value;//或则将value设置到SecondActivity的静态属性中</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li><li><p><strong>将传递的信息做本地存储，如SP存储、数据库等，然后在跳转对象中取出来，不会提高程序的耦合性，但是效率较低。</strong><br>存储实体类，首先可以使用Gson将实体转为json串(可以使用new Gson().toJson()方法)，然后进行存储，最后在跳转对象中取出再利用Gson转为实体即可(可以使用new Gson().fromJson()方法)。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;android-os-TransactionTooLargeException&quot;&gt;&lt;a href=&quot;#android-os-TransactionTooLargeException&quot; class=&quot;headerlink&quot; title=&quot;android.os.Tra
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java位移运算符</title>
    <link href="http://www.nhtzj.com/3460247515/"/>
    <id>http://www.nhtzj.com/3460247515/</id>
    <published>2019-07-03T03:15:59.000Z</published>
    <updated>2019-07-04T01:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的位移操作符就3个，而且仅对<span class="label label-primary">整数类型</span>有效，分别为</p><ul><li><code>&lt;&lt;</code>      左移，右空位补0，相当于乘2</li><li><code>&gt;&gt;</code>      右移（带符号），左空位补符号位（负数补1，正数补0），相当于除2</li><li><code>&gt;&gt;&gt;</code>    右移（无符号），左空位补0</li></ul><p>对于32位的int类型，位移超过31时（对于64位的long类型，位移超过63时），编辑工具（intelliJ）会显示warm提示（负数和超范围的数逗被认为是开发者coding错误），但仍可运行。结果等同于 <code>当前位移数%类型长度（整形32，长整型long 64）</code>；</p><p>对于位移负数位<code>x</code>，等效于将<code>x+n*类型长度</code>，即将负数位移数转换成小于类型长度的正整数，然后再做位移操作。</p><p><strong>看一波Oracle的原文介绍</strong></p><blockquote><p>The Java programming language also provides operators that perform bitwise and bit shift operations on integral types. The operators discussed in this section are less commonly used. Therefore, their coverage is brief; the intent is to simply make you aware that these operators exist.</p><p>The unary bitwise complement operator “<code>~</code>“ inverts a bit pattern; it can be applied to any of the integral types, making every “0” a “1” and every “1” a “0”. For example, a <code>byte</code> contains 8 bits; applying this operator to a value whose bit pattern is “00000000” would change its pattern to “11111111”.</p><p>The signed left shift operator “<code>&lt;&lt;</code>“ shifts a bit pattern to the left, and the signed right shift operator “<code>&gt;&gt;</code>“ shifts a bit pattern to the right. The bit pattern is given by the left-hand operand, and the number of positions to shift by the right-hand operand. The unsigned right shift operator “<code>&gt;&gt;&gt;</code>“ shifts a zero into the leftmost position, while the leftmost position after <code>&quot;&gt;&gt;&quot;</code> depends on sign extension.</p><p>The bitwise <code>&amp;</code> operator performs a bitwise AND operation.</p><p>The bitwise <code>^</code> operator performs a bitwise exclusive OR operation.</p><p>The bitwise <code>|</code> operator performs a bitwise inclusive OR operation.</p><p>The following program, <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/examples/BitDemo.java" target="_blank" rel="noopener"><code>BitDemo</code></a>, uses the bitwise AND operator to print the number “2” to standard output.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">BitDemo</span> </span>&#123;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">int</span> bitmask = <span class="number">0x000F</span>;</span><br><span class="line">&gt;         <span class="keyword">int</span> val = <span class="number">0x2222</span>;</span><br><span class="line">&gt;         <span class="comment">// prints "2"</span></span><br><span class="line">&gt;         System.out.println(val &amp; bitmask);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html" target="_blank" rel="noopener">Bitwise and Bit Shift Operators</a></p><p><a href="https://zhuanlan.zhihu.com/p/30108890" target="_blank" rel="noopener">Java中的移位运算符</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java中的位移操作符就3个，而且仅对&lt;span class=&quot;label label-primary&quot;&gt;整数类型&lt;/span&gt;有效，分别为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;      左移，右空位补0，相当于乘2&lt;/li&gt;
&lt;li&gt;&lt;c
      
    
    </summary>
    
      <category term="Java" scheme="http://www.nhtzj.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nhtzj.com/tags/Java/"/>
    
      <category term="运算符" scheme="http://www.nhtzj.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
</feed>
